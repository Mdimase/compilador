
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compilador.sintactico;

import compilador.ast.base.*;
import compilador.ast.instrucciones.*;
import compilador.ast.operaciones.binarias.*;
import compilador.ast.operaciones.unarias.*;
import java.util.*;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SintacticoSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\130\000\002\002\004\000\002\015\004\000\002\015" +
    "\003\000\002\016\007\000\002\021\005\000\002\021\004" +
    "\000\002\021\004\000\002\021\003\000\002\026\012\000" +
    "\002\026\011\000\002\027\005\000\002\027\004\000\002" +
    "\027\003\000\002\030\005\000\002\030\002\000\002\031" +
    "\005\000\002\032\007\000\002\041\003\000\002\041\003" +
    "\000\002\041\003\000\002\041\003\000\002\020\004\000" +
    "\002\020\003\000\002\022\004\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\004\000\002\023\003\000\002\023\003\000" +
    "\002\023\005\000\002\023\005\000\002\023\005\000\002" +
    "\023\003\000\002\024\005\000\002\025\006\000\002\025" +
    "\010\000\002\033\005\000\002\037\006\000\002\017\014" +
    "\000\002\017\012\000\002\002\006\000\002\002\005\000" +
    "\002\014\005\000\002\014\003\000\002\035\006\000\002" +
    "\035\006\000\002\036\006\000\002\036\006\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\040\010" +
    "\000\002\040\006\000\002\003\003\000\002\005\003\000" +
    "\002\007\005\000\002\007\003\000\002\010\005\000\002" +
    "\010\003\000\002\011\004\000\002\011\003\000\002\004" +
    "\005\000\002\004\005\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\003\000" +
    "\002\006\005\000\002\006\005\000\002\006\003\000\002" +
    "\012\005\000\002\012\005\000\002\012\003\000\002\013" +
    "\005\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\260\000\010\004\010\026\013\050\012\001\002\000" +
    "\010\004\010\026\013\050\012\001\002\000\010\004\ufffa" +
    "\026\ufffa\050\ufffa\001\002\000\004\022\256\001\002\000" +
    "\004\002\255\001\002\000\004\027\251\001\002\000\004" +
    "\002\uffff\001\002\000\004\057\107\001\002\000\004\057" +
    "\014\001\002\000\004\027\015\001\002\000\010\064\016" +
    "\065\020\066\021\001\002\000\050\013\uffcb\022\uffcb\026" +
    "\uffcb\030\uffcb\031\uffcb\033\uffcb\035\uffcb\036\uffcb\040\uffcb" +
    "\041\uffcb\042\uffcb\043\uffcb\044\uffcb\046\uffcb\047\uffcb\051" +
    "\uffcb\052\uffcb\053\uffcb\057\uffcb\001\002\000\010\022\uffd9" +
    "\030\022\035\uffd9\001\002\000\050\013\uffca\022\uffca\026" +
    "\uffca\030\uffca\031\uffca\033\uffca\035\uffca\036\uffca\040\uffca" +
    "\041\uffca\042\uffca\043\uffca\044\uffca\046\uffca\047\uffca\051" +
    "\uffca\052\uffca\053\uffca\057\uffca\001\002\000\050\013\uffc9" +
    "\022\uffc9\026\uffc9\030\uffc9\031\uffc9\033\uffc9\035\uffc9\036" +
    "\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9\046\uffc9" +
    "\047\uffc9\051\uffc9\052\uffc9\053\uffc9\057\uffc9\001\002\000" +
    "\022\007\024\012\033\025\041\057\042\060\043\061\040" +
    "\062\026\063\035\001\002\000\042\006\067\007\071\013" +
    "\uffb8\014\074\015\073\016\076\017\075\020\070\021\072" +
    "\022\uffb8\023\uffb8\024\uffb8\032\uffb8\034\uffb8\035\uffb8\052" +
    "\uffb8\001\002\000\020\007\024\012\033\057\042\060\043" +
    "\061\040\062\026\063\035\001\002\000\046\006\uffab\007" +
    "\uffab\010\uffab\011\uffab\013\uffab\014\uffab\015\uffab\016\uffab" +
    "\017\uffab\020\uffab\021\uffab\022\uffab\023\uffab\024\uffab\032" +
    "\uffab\034\uffab\035\uffab\052\uffab\001\002\000\046\006\uffad" +
    "\007\uffad\010\uffad\011\uffad\013\uffad\014\uffad\015\uffad\016" +
    "\uffad\017\uffad\020\uffad\021\uffad\022\uffad\023\uffad\024\uffad" +
    "\032\uffad\034\uffad\035\uffad\052\uffad\001\002\000\046\006" +
    "\uffb5\007\uffb5\010\063\011\062\013\uffb5\014\uffb5\015\uffb5" +
    "\016\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5\024" +
    "\uffb5\032\uffb5\034\uffb5\035\uffb5\052\uffb5\001\002\000\022" +
    "\013\uffc1\022\uffc1\023\uffc1\024\uffc1\032\uffc1\034\uffc1\035" +
    "\uffc1\052\uffc1\001\002\000\022\013\uffbf\022\uffbf\023\uffbf" +
    "\024\uffbf\032\uffbf\034\uffbf\035\uffbf\052\uffbf\001\002\000" +
    "\020\013\uffc5\022\uffc5\023\060\032\uffc5\034\uffc5\035\uffc5" +
    "\052\uffc5\001\002\000\022\007\024\012\033\025\041\057" +
    "\042\060\043\061\040\062\026\063\035\001\002\000\006" +
    "\022\uffd8\035\uffd8\001\002\000\046\006\uffac\007\uffac\010" +
    "\uffac\011\uffac\013\uffac\014\uffac\015\uffac\016\uffac\017\uffac" +
    "\020\uffac\021\uffac\022\uffac\023\uffac\024\uffac\032\uffac\034" +
    "\uffac\035\uffac\052\uffac\001\002\000\022\013\uffc3\022\uffc3" +
    "\023\uffc3\024\054\032\uffc3\034\uffc3\035\uffc3\052\uffc3\001" +
    "\002\000\046\006\uffb2\007\uffb2\010\uffb2\011\uffb2\013\uffb2" +
    "\014\uffb2\015\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2\022" +
    "\uffb2\023\uffb2\024\uffb2\032\uffb2\034\uffb2\035\uffb2\052\uffb2" +
    "\001\002\000\046\006\uffae\007\uffae\010\uffae\011\uffae\013" +
    "\uffae\014\uffae\015\uffae\016\uffae\017\uffae\020\uffae\021\uffae" +
    "\022\uffae\023\uffae\024\uffae\032\uffae\034\uffae\035\uffae\052" +
    "\uffae\001\002\000\022\007\024\012\033\025\041\057\042" +
    "\060\043\061\040\062\026\063\035\001\002\000\050\006" +
    "\uffb0\007\uffb0\010\uffb0\011\uffb0\012\044\013\uffb0\014\uffb0" +
    "\015\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0\023" +
    "\uffb0\024\uffb0\032\uffb0\034\uffb0\035\uffb0\052\uffb0\001\002" +
    "\000\046\006\uffaf\007\uffaf\010\uffaf\011\uffaf\013\uffaf\014" +
    "\uffaf\015\uffaf\016\uffaf\017\uffaf\020\uffaf\021\uffaf\022\uffaf" +
    "\023\uffaf\024\uffaf\032\uffaf\034\uffaf\035\uffaf\052\uffaf\001" +
    "\002\000\024\007\024\012\033\013\047\025\041\057\042" +
    "\060\043\061\040\062\026\063\035\001\002\000\006\013" +
    "\uffd0\052\uffd0\001\002\000\006\013\051\052\050\001\002" +
    "\000\046\006\uffd2\007\uffd2\010\uffd2\011\uffd2\013\uffd2\014" +
    "\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2" +
    "\023\uffd2\024\uffd2\032\uffd2\034\uffd2\035\uffd2\052\uffd2\001" +
    "\002\000\022\007\024\012\033\025\041\057\042\060\043" +
    "\061\040\062\026\063\035\001\002\000\046\006\uffd3\007" +
    "\uffd3\010\uffd3\011\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3" +
    "\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3\032" +
    "\uffd3\034\uffd3\035\uffd3\052\uffd3\001\002\000\006\013\uffd1" +
    "\052\uffd1\001\002\000\022\013\uffc0\022\uffc0\023\uffc0\024" +
    "\uffc0\032\uffc0\034\uffc0\035\uffc0\052\uffc0\001\002\000\022" +
    "\007\024\012\033\025\041\057\042\060\043\061\040\062" +
    "\026\063\035\001\002\000\022\013\uffc2\022\uffc2\023\uffc2" +
    "\024\uffc2\032\uffc2\034\uffc2\035\uffc2\052\uffc2\001\002\000" +
    "\006\013\057\023\060\001\002\000\046\006\uffb1\007\uffb1" +
    "\010\uffb1\011\uffb1\013\uffb1\014\uffb1\015\uffb1\016\uffb1\017" +
    "\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1\032\uffb1" +
    "\034\uffb1\035\uffb1\052\uffb1\001\002\000\022\007\024\012" +
    "\033\025\041\057\042\060\043\061\040\062\026\063\035" +
    "\001\002\000\022\013\uffc4\022\uffc4\023\uffc4\024\054\032" +
    "\uffc4\034\uffc4\035\uffc4\052\uffc4\001\002\000\020\007\024" +
    "\012\033\057\042\060\043\061\040\062\026\063\035\001" +
    "\002\000\020\007\024\012\033\057\042\060\043\061\040" +
    "\062\026\063\035\001\002\000\046\006\uffb4\007\uffb4\010" +
    "\uffb4\011\uffb4\013\uffb4\014\uffb4\015\uffb4\016\uffb4\017\uffb4" +
    "\020\uffb4\021\uffb4\022\uffb4\023\uffb4\024\uffb4\032\uffb4\034" +
    "\uffb4\035\uffb4\052\uffb4\001\002\000\046\006\uffb3\007\uffb3" +
    "\010\uffb3\011\uffb3\013\uffb3\014\uffb3\015\uffb3\016\uffb3\017" +
    "\uffb3\020\uffb3\021\uffb3\022\uffb3\023\uffb3\024\uffb3\032\uffb3" +
    "\034\uffb3\035\uffb3\052\uffb3\001\002\000\046\006\uffaa\007" +
    "\uffaa\010\uffaa\011\uffaa\013\uffaa\014\uffaa\015\uffaa\016\uffaa" +
    "\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\032" +
    "\uffaa\034\uffaa\035\uffaa\052\uffaa\001\002\000\020\007\024" +
    "\012\033\057\042\060\043\061\040\062\026\063\035\001" +
    "\002\000\020\007\024\012\033\057\042\060\043\061\040" +
    "\062\026\063\035\001\002\000\020\007\024\012\033\057" +
    "\042\060\043\061\040\062\026\063\035\001\002\000\020" +
    "\007\024\012\033\057\042\060\043\061\040\062\026\063" +
    "\035\001\002\000\020\007\024\012\033\057\042\060\043" +
    "\061\040\062\026\063\035\001\002\000\020\007\024\012" +
    "\033\057\042\060\043\061\040\062\026\063\035\001\002" +
    "\000\020\007\024\012\033\057\042\060\043\061\040\062" +
    "\026\063\035\001\002\000\020\007\024\012\033\057\042" +
    "\060\043\061\040\062\026\063\035\001\002\000\026\006" +
    "\067\007\071\013\uffbc\022\uffbc\023\uffbc\024\uffbc\032\uffbc" +
    "\034\uffbc\035\uffbc\052\uffbc\001\002\000\026\006\067\007" +
    "\071\013\uffbb\022\uffbb\023\uffbb\024\uffbb\032\uffbb\034\uffbb" +
    "\035\uffbb\052\uffbb\001\002\000\026\006\067\007\071\013" +
    "\uffb9\022\uffb9\023\uffb9\024\uffb9\032\uffb9\034\uffb9\035\uffb9" +
    "\052\uffb9\001\002\000\026\006\067\007\071\013\uffba\022" +
    "\uffba\023\uffba\024\uffba\032\uffba\034\uffba\035\uffba\052\uffba" +
    "\001\002\000\026\006\067\007\071\013\uffbd\022\uffbd\023" +
    "\uffbd\024\uffbd\032\uffbd\034\uffbd\035\uffbd\052\uffbd\001\002" +
    "\000\046\006\uffb6\007\uffb6\010\063\011\062\013\uffb6\014" +
    "\uffb6\015\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6" +
    "\023\uffb6\024\uffb6\032\uffb6\034\uffb6\035\uffb6\052\uffb6\001" +
    "\002\000\026\006\067\007\071\013\uffbe\022\uffbe\023\uffbe" +
    "\024\uffbe\032\uffbe\034\uffbe\035\uffbe\052\uffbe\001\002\000" +
    "\046\006\uffb7\007\uffb7\010\063\011\062\013\uffb7\014\uffb7" +
    "\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7\023" +
    "\uffb7\024\uffb7\032\uffb7\034\uffb7\035\uffb7\052\uffb7\001\002" +
    "\000\004\012\110\001\002\000\006\013\113\057\112\001" +
    "\002\000\004\013\245\001\002\000\004\027\243\001\002" +
    "\000\004\051\135\001\002\000\006\013\ufff5\052\133\001" +
    "\002\000\006\013\ufff3\052\116\001\002\000\004\057\120" +
    "\001\002\000\004\013\ufff6\001\002\000\004\027\123\001" +
    "\002\000\006\013\ufff3\052\116\001\002\000\004\013\ufff4" +
    "\001\002\000\010\064\016\065\020\066\021\001\002\000" +
    "\004\030\125\001\002\000\012\060\126\061\130\062\127" +
    "\063\131\001\002\000\006\013\ufff0\052\ufff0\001\002\000" +
    "\006\013\uffee\052\uffee\001\002\000\006\013\uffef\052\uffef" +
    "\001\002\000\006\013\uffed\052\uffed\001\002\000\006\013" +
    "\ufff1\052\ufff1\001\002\000\004\057\112\001\002\000\004" +
    "\013\ufff7\001\002\000\010\064\016\065\020\066\021\001" +
    "\002\000\036\026\013\031\142\033\147\036\154\040\151" +
    "\041\143\042\150\043\137\044\153\046\161\047\140\051" +
    "\144\053\166\057\162\001\002\000\004\012\241\001\002" +
    "\000\006\022\uffe2\035\uffe2\001\002\000\006\022\uffdf\035" +
    "\uffdf\001\002\000\022\007\024\012\033\025\041\057\042" +
    "\060\043\061\040\062\026\063\035\001\002\000\004\012" +
    "\231\001\002\000\022\007\024\012\033\025\041\057\042" +
    "\060\043\061\040\062\026\063\035\001\002\000\004\022" +
    "\227\001\002\000\006\022\uffdb\035\uffdb\001\002\000\022" +
    "\007\024\012\033\025\041\057\042\060\043\061\040\062" +
    "\026\063\035\001\002\000\004\012\217\001\002\000\004" +
    "\012\212\001\002\000\006\022\uffe5\035\uffe5\001\002\000" +
    "\004\012\210\001\002\000\036\026\013\031\142\033\147" +
    "\036\154\040\151\041\143\042\150\043\137\044\153\046" +
    "\161\047\140\051\144\053\166\057\162\001\002\000\010" +
    "\004\ufff8\026\ufff8\050\ufff8\001\002\000\006\022\uffe7\035" +
    "\uffe7\001\002\000\006\022\uffe6\035\uffe6\001\002\000\006" +
    "\022\uffe9\035\uffe9\001\002\000\006\022\uffe3\035\uffe3\001" +
    "\002\000\006\012\044\030\202\001\002\000\006\022\uffe8" +
    "\035\uffe8\001\002\000\006\022\uffe4\035\uffe4\001\002\000" +
    "\006\022\uffe0\035\uffe0\001\002\000\004\057\167\001\002" +
    "\000\004\056\170\001\002\000\004\060\171\001\002\000" +
    "\004\055\172\001\002\000\004\060\173\001\002\000\006" +
    "\032\174\054\175\001\002\000\036\026\013\031\142\033" +
    "\147\036\154\040\151\041\143\042\150\043\137\044\153" +
    "\046\161\047\140\051\144\053\166\057\162\001\002\000" +
    "\004\060\176\001\002\000\004\032\177\001\002\000\036" +
    "\026\013\031\142\033\147\036\154\040\151\041\143\042" +
    "\150\043\137\044\153\046\161\047\140\051\144\053\166" +
    "\057\162\001\002\000\006\022\uffd5\035\uffd5\001\002\000" +
    "\006\022\uffd4\035\uffd4\001\002\000\022\007\024\012\033" +
    "\025\041\057\042\060\043\061\040\062\026\063\035\001" +
    "\002\000\006\022\uffd7\035\uffd7\001\002\000\040\026\013" +
    "\031\142\033\147\036\154\037\206\040\151\041\143\042" +
    "\150\043\137\044\153\046\161\047\140\051\144\053\166" +
    "\057\162\001\002\000\040\026\uffeb\031\uffeb\033\uffeb\036" +
    "\uffeb\037\uffeb\040\uffeb\041\uffeb\042\uffeb\043\uffeb\044\uffeb" +
    "\046\uffeb\047\uffeb\051\uffeb\053\uffeb\057\uffeb\001\002\000" +
    "\006\022\uffda\035\uffda\001\002\000\040\026\uffec\031\uffec" +
    "\033\uffec\036\uffec\037\uffec\040\uffec\041\uffec\042\uffec\043" +
    "\uffec\044\uffec\046\uffec\047\uffec\051\uffec\053\uffec\057\uffec" +
    "\001\002\000\004\013\211\001\002\000\006\022\uffdc\035" +
    "\uffdc\001\002\000\024\007\024\012\033\025\041\057\042" +
    "\060\043\061\040\062\026\063\035\067\214\001\002\000" +
    "\004\013\216\001\002\000\004\013\215\001\002\000\006" +
    "\022\uffce\035\uffce\001\002\000\006\022\uffcf\035\uffcf\001" +
    "\002\000\004\013\220\001\002\000\006\022\uffde\035\uffde" +
    "\001\002\000\004\034\223\001\002\000\006\032\uffc6\034" +
    "\uffc6\001\002\000\036\026\013\031\142\033\147\036\154" +
    "\040\151\041\143\042\150\043\137\044\153\046\161\047" +
    "\140\051\144\053\166\057\162\001\002\000\006\022\uffc7" +
    "\035\225\001\002\000\036\026\013\031\142\033\147\036" +
    "\154\040\151\041\143\042\150\043\137\044\153\046\161" +
    "\047\140\051\144\053\166\057\162\001\002\000\006\022" +
    "\uffc8\035\uffc8\001\002\000\044\004\uffea\026\uffea\031\uffea" +
    "\033\uffea\036\uffea\037\uffea\040\uffea\041\uffea\042\uffea\043" +
    "\uffea\044\uffea\046\uffea\047\uffea\050\uffea\051\uffea\053\uffea" +
    "\057\uffea\001\002\000\006\022\uffe1\035\uffe1\001\002\000" +
    "\024\007\024\012\033\025\041\057\042\060\043\061\040" +
    "\062\026\063\035\067\233\001\002\000\004\013\235\001" +
    "\002\000\004\013\234\001\002\000\006\022\uffcc\035\uffcc" +
    "\001\002\000\006\022\uffcd\035\uffcd\001\002\000\004\032" +
    "\237\001\002\000\036\026\013\031\142\033\147\036\154" +
    "\040\151\041\143\042\150\043\137\044\153\046\161\047" +
    "\140\051\144\053\166\057\162\001\002\000\006\022\uffd6" +
    "\035\uffd6\001\002\000\004\013\242\001\002\000\006\022" +
    "\uffdd\035\uffdd\001\002\000\010\064\016\065\020\066\021" +
    "\001\002\000\010\013\ufff2\030\125\052\ufff2\001\002\000" +
    "\004\051\246\001\002\000\010\064\016\065\020\066\021" +
    "\001\002\000\036\026\013\031\142\033\147\036\154\040" +
    "\151\041\143\042\150\043\137\044\153\046\161\047\140" +
    "\051\144\053\166\057\162\001\002\000\010\004\ufff9\026" +
    "\ufff9\050\ufff9\001\002\000\036\026\013\031\142\033\147" +
    "\036\154\040\151\041\143\042\150\043\137\044\153\046" +
    "\161\047\140\051\144\053\166\057\162\001\002\000\040" +
    "\026\013\031\142\033\147\036\154\037\253\040\151\041" +
    "\143\042\150\043\137\044\153\046\161\047\140\051\144" +
    "\053\166\057\162\001\002\000\004\005\254\001\002\000" +
    "\004\002\ufffe\001\002\000\004\002\001\001\002\000\010" +
    "\004\ufffc\026\ufffc\050\ufffc\001\002\000\010\004\ufffb\026" +
    "\ufffb\050\ufffb\001\002\000\004\022\262\001\002\000\004" +
    "\002\000\001\002\000\010\004\ufffd\026\ufffd\050\ufffd\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\260\000\014\015\006\016\010\021\003\025\005\026" +
    "\004\001\001\000\010\016\260\025\257\026\256\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\034\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\002\024\004\030\005\033\006\022\007" +
    "\031\010\035\011\027\012\026\013\036\001\001\000\002" +
    "\001\001\000\006\002\024\013\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\002\024\004" +
    "\030\006\022\007\055\010\035\011\027\012\026\013\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\002\024" +
    "\004\030\006\022\011\052\012\026\013\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\002\024\004\030" +
    "\005\044\006\022\007\031\010\035\011\027\012\026\013" +
    "\036\014\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\002\024\004\030\005\051\006" +
    "\022\007\031\010\035\011\027\012\026\013\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\002\024\004\030\006\022\011\054\012\026\013\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\002\024\004\030\006\022\010\060\011\027" +
    "\012\026\013\036\001\001\000\002\001\001\000\006\002" +
    "\024\013\064\001\001\000\006\002\024\013\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\002\024\012\105\013\036\001\001\000\012\002\024" +
    "\006\104\012\026\013\036\001\001\000\010\002\024\012" +
    "\103\013\036\001\001\000\012\002\024\006\102\012\026" +
    "\013\036\001\001\000\012\002\024\006\101\012\026\013" +
    "\036\001\001\000\012\002\024\006\100\012\026\013\036" +
    "\001\001\000\012\002\024\006\077\012\026\013\036\001" +
    "\001\000\012\002\024\006\076\012\026\013\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\027" +
    "\110\031\113\032\114\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\030" +
    "\116\001\001\000\004\032\120\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\030\121\001\001\000\002\001" +
    "\001\000\004\034\123\001\001\000\002\001\001\000\004" +
    "\041\131\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\027\133\031\113\032\114\001\001\000\002\001\001\000" +
    "\004\034\135\001\001\000\030\002\156\017\162\022\154" +
    "\023\144\024\145\025\163\033\151\035\164\036\140\037" +
    "\157\040\155\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\002\024\003\235\004\030\005" +
    "\221\006\022\007\031\010\035\011\027\012\026\013\036" +
    "\001\001\000\002\001\001\000\024\002\024\004\030\005" +
    "\227\006\022\007\031\010\035\011\027\012\026\013\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\002" +
    "\024\003\220\004\030\005\221\006\022\007\031\010\035" +
    "\011\027\012\026\013\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\002\156\017\162\020\203\022\204\023\144\024\145\025" +
    "\163\033\151\035\164\036\140\037\157\040\155\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\002\156\017" +
    "\162\023\200\024\145\025\163\033\151\035\164\036\140" +
    "\037\157\040\155\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\002\156\017\162\023\177\024\145\025\163" +
    "\033\151\035\164\036\140\037\157\040\155\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\002\024\004\030" +
    "\005\202\006\022\007\031\010\035\011\027\012\026\013" +
    "\036\001\001\000\002\001\001\000\030\002\156\017\162" +
    "\022\206\023\144\024\145\025\163\033\151\035\164\036" +
    "\140\037\157\040\155\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\002\024\004\030\005\212\006\022\007\031" +
    "\010\035\011\027\012\026\013\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\002\156\017\162\023\223\024\145" +
    "\025\163\033\151\035\164\036\140\037\157\040\155\001" +
    "\001\000\002\001\001\000\026\002\156\017\162\023\225" +
    "\024\145\025\163\033\151\035\164\036\140\037\157\040" +
    "\155\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\002\024\004\030\005\231\006\022\007" +
    "\031\010\035\011\027\012\026\013\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\002\156\017\162\023\237" +
    "\024\145\025\163\033\151\035\164\036\140\037\157\040" +
    "\155\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\034\243\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\034\246\001\001\000\030\002\156" +
    "\017\162\022\247\023\144\024\145\025\163\033\151\035" +
    "\164\036\140\037\157\040\155\001\001\000\002\001\001" +
    "\000\032\002\156\017\162\020\251\022\204\023\144\024" +
    "\145\025\163\033\151\035\164\036\140\037\157\040\155" +
    "\001\001\000\030\002\156\017\162\022\206\023\144\024" +
    "\145\025\163\033\151\035\164\036\140\037\157\040\155" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /*
    public void syntax_error(Symbol s) {
        System.out.println("Error en la línea " + (s.right+1) + ", columna " + s.left + ": "
            + SintacticoSym.terminalNames[s.sym] + "(" + s.value + ") no reconocido.");
    }   */

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
            System.out.println("Error en la linea "+ (s.left+1)+ " Columna "+ s.right+ ". Valor simbolo '"
            +s.value+"' . Simbolo n° "+s.sym+ " no reconocido." );
        }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {




  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Programa start_val = (Programa)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= declaraciones bloque_main 
            {
              Programa RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		List<Sentencia> d = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bmleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bmright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Bloque bm = (Bloque)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            Bloque declaraciones = new Bloque(d,"DECLARACIONES",false);
            RESULT = new Programa(declaraciones,bm);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("programa",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= bloque_main 
            {
              Programa RESULT =null;
		int bmleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bmright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Bloque bm = (Bloque)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new Programa(bm);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("programa",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // bloque_main ::= MAIN IS sentencias END PUNTO 
            {
              Bloque RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		List<Sentencia> ss = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
            RESULT = new Bloque(ss,"MAIN",true);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bloque_main",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaraciones ::= declaraciones declaracion_variable PUNTO_COMA 
            {
              List<Sentencia> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		List<Sentencia> d = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int dvleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		DeclaracionVariable dv = (DeclaracionVariable)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            d.add(dv);
            RESULT= d;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaraciones",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaraciones ::= declaracion_variable PUNTO_COMA 
            {
              List<Sentencia> RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		DeclaracionVariable dv = (DeclaracionVariable)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            List<Sentencia> ds = new ArrayList<>();
            ds.add(dv);
            RESULT= ds;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaraciones",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaraciones ::= declaraciones declaracion_funcion 
            {
              List<Sentencia> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		List<Sentencia> d = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int dfleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		DeclaracionFuncion df = (DeclaracionFuncion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            d.add(df);
            RESULT= d;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaraciones",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaraciones ::= declaracion_funcion 
            {
              List<Sentencia> RESULT =null;
		int dfleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		DeclaracionFuncion df = (DeclaracionFuncion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            List<Sentencia> dfs = new ArrayList<>();
            dfs.add(df);
            RESULT= dfs;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaraciones",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracion_funcion ::= FUNCTION IDENTIFICADOR APERTURA_PARENTESIS parametros CIERRE_PARENTESIS RETURN tipo sentencia 
            {
              DeclaracionFuncion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		List<Parametro> p = (List<Parametro>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Sentencia s = (Sentencia)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            Identificador identificador = new Identificador(id,t);
            List<Sentencia> aux = new ArrayList<Sentencia>();
            aux.add(s);
            Bloque bloque = new Bloque(aux,false);
            RESULT= new DeclaracionFuncion(identificador,t,p,bloque);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracion_funcion ::= FUNCTION IDENTIFICADOR APERTURA_PARENTESIS CIERRE_PARENTESIS RETURN tipo sentencia 
            {
              DeclaracionFuncion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Sentencia s = (Sentencia)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            Identificador identificador = new Identificador(id,t);
            List<Sentencia> aux = new ArrayList<Sentencia>();
            aux.add(s);
            Bloque bloque = new Bloque(aux,false);
            RESULT= new DeclaracionFuncion(identificador,t,bloque);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // parametros ::= parametro COMA parametros 
            {
              List<Parametro> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int ppleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		List<Parametro> pp = (List<Parametro>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            pp.add(p);
            RESULT = pp;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametros",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // parametros ::= parametro_con_v_defecto parametros_con_v_defecto 
            {
              List<Parametro> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int ppleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		List<Parametro> pp = (List<Parametro>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            pp.add(p);
            RESULT = pp;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametros",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // parametros ::= parametro 
            {
              List<Parametro> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            List<Parametro> ps = new ArrayList<>();
            ps.add(p);
            RESULT= ps;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametros",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // parametros_con_v_defecto ::= COMA parametro_con_v_defecto parametros_con_v_defecto 
            {
              List<Parametro> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int ppleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		List<Parametro> pp = (List<Parametro>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            pp.add(p);
            RESULT=pp;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametros_con_v_defecto",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // parametros_con_v_defecto ::= 
            {
              List<Parametro> RESULT =null;
		
            List<Parametro> pvs = new ArrayList<>();
            RESULT= pvs;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametros_con_v_defecto",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // parametro ::= IDENTIFICADOR IS tipo 
            {
              Parametro RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            Identificador identificador = new Identificador(id,t);
            RESULT= new Parametro(t,identificador);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametro",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // parametro_con_v_defecto ::= IDENTIFICADOR IS tipo IGUAL valor_defecto 
            {
              Parametro RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Constante v = (Constante)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            Identificador identificador = new Identificador(id,t);
            RESULT= new Parametro(t,identificador,v);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametro_con_v_defecto",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // valor_defecto ::= INTEGER_LITERAL 
            {
              Constante RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT= new Constante(i, Tipo.INTEGER);

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valor_defecto",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // valor_defecto ::= FLOAT_LITERAL 
            {
              Constante RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT= new Constante (f, Tipo.FLOAT);

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valor_defecto",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // valor_defecto ::= TRUE 
            {
              Constante RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT=new Constante(t,Tipo.BOOL);

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valor_defecto",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // valor_defecto ::= FALSE 
            {
              Constante RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT= new Constante(f,Tipo.BOOL);

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valor_defecto",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentencias ::= sentencias sentencia 
            {
              List<Sentencia> RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		List<Sentencia> ss = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Sentencia s = (Sentencia)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            ss.add(s);
            RESULT= ss;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencias",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentencias ::= sentencia 
            {
              List<Sentencia> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Sentencia s = (Sentencia)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            List<Sentencia> ls = new ArrayList<>();
            ls.add(s);
            RESULT= ls;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencias",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sentencia ::= instruccion PUNTO_COMA 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Sentencia i = (Sentencia)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT=i;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instruccion ::= while 
            {
              Sentencia RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		While w = (While)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=w;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // instruccion ::= for 
            {
              Sentencia RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Bloque f = (Bloque)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=f;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instruccion ::= if 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		If i = (If)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=i;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instruccion ::= invocacion_funciones 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion i = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=(Sentencia) i;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // instruccion ::= asignacion 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Asignacion a = (Asignacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=a;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // instruccion ::= declaracion_variable 
            {
              Sentencia RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		DeclaracionVariable d = (DeclaracionVariable)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=d;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // instruccion ::= BREAK 
            {
              Sentencia RESULT =null;
		
            RESULT= new Break("BREAK");
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // instruccion ::= CONTINUE 
            {
              Sentencia RESULT =null;
		
            RESULT= new Continue("CONTINUE");
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // instruccion ::= RETURN expresion 
            {
              Sentencia RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT= new Return(e);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // instruccion ::= write 
            {
              Sentencia RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Write w = (Write)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=w;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // instruccion ::= writeln 
            {
              Sentencia RESULT =null;
		int wlnleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int wlnright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Write wln = (Write)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=wln;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // instruccion ::= READ_INTEGER APERTURA_PARENTESIS CIERRE_PARENTESIS 
            {
              Sentencia RESULT =null;
		
            RESULT= new Read("READ_INTEGER",Tipo.INTEGER);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // instruccion ::= READ_BOOLEAN APERTURA_PARENTESIS CIERRE_PARENTESIS 
            {
              Sentencia RESULT =null;
		
            RESULT= new Read("READ_BOOLEAN",Tipo.BOOL);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // instruccion ::= READ_FLOAT APERTURA_PARENTESIS CIERRE_PARENTESIS 
            {
              Sentencia RESULT =null;
		
            RESULT= new Read("READ_FLOAT",Tipo.FLOAT);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // instruccion ::= bloque 
            {
              Sentencia RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=b;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // bloque ::= BEGIN sentencias END 
            {
              Sentencia RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		List<Sentencia> ss = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT = new Bloque (ss,"BLOQUE",false);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bloque",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // declaracion_variable ::= VARIABLE IDENTIFICADOR IS tipo 
            {
              DeclaracionVariable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            Identificador identificador = new Identificador(id,t);
            RESULT= new DeclaracionVariable(identificador,t);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion_variable",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // declaracion_variable ::= VARIABLE IDENTIFICADOR IS tipo IGUAL expresion 
            {
              DeclaracionVariable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            Identificador identificador = new Identificador(id,t);
            RESULT= new DeclaracionVariable(identificador,t,e);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion_variable",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // asignacion ::= IDENTIFICADOR IGUAL expresion 
            {
              Asignacion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                   Identificador ident = new Identificador(id);
                   RESULT = new Asignacion(ident,e);
              
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacion",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // while ::= WHILE condicion DO instruccion 
            {
              While RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Sentencia i = (Sentencia)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            List<Sentencia> aux = new ArrayList<Sentencia>();
            aux.add(i);
            Bloque bloque = new Bloque(aux,"BLOQUE_WHILE",false);
            RESULT= new While("WHILE",c, bloque);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("while",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // for ::= FOR IDENTIFICADOR FROM INTEGER_LITERAL TO INTEGER_LITERAL BY INTEGER_LITERAL DO instruccion 
            {
              Bloque RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Sentencia i = (Sentencia)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
/*
            Identificador identificador = new Identificador(id);
            Constante from = new Constante(f, Tipo.INTEGER);
            Constante to = new Constante(t, Tipo.INTEGER);
            Constante by = new Constante(b, Tipo.INTEGER);
            List<Sentencia> aux = new ArrayList<Sentencia>();
            aux.add(i);
            Bloque bloque = new Bloque(aux,"FOR",false);
            RESULT= new For(identificador,from,to,by,bloque);
*/
            //FOR -> WHILE esta bien aca, no me grafica BLOQUE en el while interno
            List<Sentencia> cuerpoFor = new ArrayList<Sentencia>(); //lista de sentencias del bloque principal
            Expresion from = new Constante(f, Tipo.INTEGER);    //constante from
            Identificador identificador = new Identificador(id);    //identificador
            Sentencia as = new Asignacion(identificador,from);  //primera asignacion id=f;
            cuerpoFor.add(as);  //agrego esa sentencia al bloque principal

            List<Sentencia> aux = new ArrayList<Sentencia>();   //lista de sentencias del bloque while interno
            aux.add(i); //agrego todas las sentencias que eran del for original
            Expresion by = new Constante(b, Tipo.INTEGER);  //constante by
            Expresion exp = new Suma(identificador,by); //expresion usada en la asignacion id+by;
            Sentencia asig = new Asignacion(identificador,exp); // asignacion id=id+by;
            aux.add(asig);  //agrego la asignacion a la lista de sentencias del bloque while interno

            Expresion to = new Constante(t,Tipo.INTEGER);   //constante to
            Expresion condicion = new MenorIgual(identificador,to); //condicion del while interno

            Bloque bloque = new Bloque(aux,"BLOQUE",false);  //bloque de sentencias del while interno

            While w = new While("WHILE",condicion,bloque);  // while interno completo
            cuerpoFor.add(w);   //agrego el while completo a la lista de sentencias del cuerpo de mi for original
            RESULT = new Bloque (cuerpoFor,"FOR->WHILE",false);

        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("for",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // for ::= FOR IDENTIFICADOR FROM INTEGER_LITERAL TO INTEGER_LITERAL DO instruccion 
            {
              Bloque RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Sentencia i = (Sentencia)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
/*
            Identificador identificador = new Identificador(id);
            Constante from = new Constante(f, Tipo.INTEGER);
            Constante to = new Constante(t, Tipo.INTEGER);
            Constante by = new Constante(String.valueOf(1), Tipo.INTEGER);
            List<Sentencia> aux = new ArrayList<Sentencia>();
            aux.add(i);
            Bloque bloque = new Bloque(aux,"FOR",false);
            RESULT= new For(identificador,from,to,by,bloque);
*/
            //FOR -> WHILE esta bien aca, no me grafica BLOQUE en el while interno
            List<Sentencia> cuerpoFor = new ArrayList<Sentencia>(); //lista de sentencias del bloque principal
            Expresion from = new Constante(f, Tipo.INTEGER);    //constante from
            Identificador identificador = new Identificador(id);    //identificador
            Sentencia as = new Asignacion(identificador,from);  //primera asignacion id=f;
            cuerpoFor.add(as);  //agrego esa sentencia al bloque principal

            List<Sentencia> aux = new ArrayList<Sentencia>();   //lista de sentencias del bloque while interno
            aux.add(i); //agrego todas las sentencias que eran del for original
            Expresion by = new Constante(String.valueOf(1), Tipo.INTEGER);  //constante by
            Expresion exp = new Suma(identificador,by); //expresion usada en la asignacion id+by;
            Sentencia asig = new Asignacion(identificador,exp); // asignacion id=id+by;
            aux.add(asig);  //agrego la asignacion a la lista de sentencias del bloque while interno

            Expresion to = new Constante(t,Tipo.INTEGER);   //constante to
            Expresion condicion = new MenorIgual(identificador,to); //condicion del while interno

            Bloque bloque = new Bloque(aux,"BLOQUE",false);  //bloque de sentencias del while interno

            While w = new While("WHILE",condicion,bloque);  // while interno completo
            cuerpoFor.add(w);   //agrego el while completo a la lista de sentencias del cuerpo de mi for original
            RESULT = new Bloque (cuerpoFor,"BLOQUE_FOR to WHILE",false);

        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("for",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // invocacion_funciones ::= IDENTIFICADOR APERTURA_PARENTESIS parametros_invocacion CIERRE_PARENTESIS 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		List<Expresion> p = (List<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            Identificador identificador = new Identificador(id);
            RESULT = new InvocacionFuncion(identificador,p);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("invocacion_funciones",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // invocacion_funciones ::= IDENTIFICADOR APERTURA_PARENTESIS CIERRE_PARENTESIS 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
            Identificador identificador = new Identificador(id);
            RESULT = new InvocacionFuncion(identificador);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("invocacion_funciones",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // parametros_invocacion ::= parametros_invocacion COMA expresion 
            {
              List<Expresion> RESULT =null;
		int pileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int piright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		List<Expresion> pi = (List<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            pi.add(e);
            RESULT = pi;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametros_invocacion",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // parametros_invocacion ::= expresion 
            {
              List<Expresion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            List<Expresion> exp = new ArrayList();
            exp.add(e);
            RESULT= exp;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametros_invocacion",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // write ::= WRITE APERTURA_PARENTESIS expresion CIERRE_PARENTESIS 
            {
              Write RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT = new Write(e);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("write",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // write ::= WRITE APERTURA_PARENTESIS STRING_LITERAL CIERRE_PARENTESIS 
            {
              Write RESULT =null;
		
            Write w = new Write();
            w.setEsString(true);
            RESULT = w;
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("write",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // writeln ::= WRITELN APERTURA_PARENTESIS expresion CIERRE_PARENTESIS 
            {
              Write RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT = new Write(e, true);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("writeln",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // writeln ::= WRITELN APERTURA_PARENTESIS STRING_LITERAL CIERRE_PARENTESIS 
            {
              Write RESULT =null;
		
            Write w = new Write(true);
            w.setEsString(true);
            RESULT = w;
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("writeln",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // tipo ::= INTEGER 
            {
              Tipo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT= Tipo.INTEGER;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // tipo ::= FLOAT 
            {
              Tipo RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT= Tipo.FLOAT;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // tipo ::= BOOLEAN 
            {
              Tipo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT= Tipo.BOOL;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // if ::= IF condicion THEN instruccion ELSE instruccion 
            {
              If RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Sentencia i1 = (Sentencia)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Sentencia i2 = (Sentencia)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            List<Sentencia> sentenciasIf = new ArrayList<Sentencia>();
            sentenciasIf.add(i1);
            Bloque bloqueThen = new Bloque(sentenciasIf,"BLOQUE_THEN",false);
            List<Sentencia> sentenciasElse = new ArrayList<Sentencia>();
            sentenciasElse.add(i2);
            Bloque bloqueElse = new Bloque(sentenciasElse,"BLOQUE_ELSE",false);
            RESULT= new If("IF/ELSE",c, bloqueThen, bloqueElse);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("if",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // if ::= IF condicion THEN instruccion 
            {
              If RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Sentencia i = (Sentencia)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            List<Sentencia> sentenciasIf = new ArrayList<Sentencia>();
            sentenciasIf.add(i);
            Bloque bloqueThen = new Bloque(sentenciasIf,"BLOQUE_THEN",false);
            RESULT= new If("IF",c, bloqueThen);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("if",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // condicion ::= expresion 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=e;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expresion ::= exp_or 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=e;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // exp_or ::= exp_or OR exp_and 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion ea = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT= new Or(e, ea);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp_or",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // exp_or ::= exp_and 
            {
              Expresion RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion ea = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=ea;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp_or",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // exp_and ::= exp_and AND exp_not 
            {
              Expresion RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion ea = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int enleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int enright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion en = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT= new And(ea,en);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp_and",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // exp_and ::= exp_not 
            {
              Expresion RESULT =null;
		int enleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int enright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion en = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=en;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp_and",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // exp_not ::= NOT exp_not 
            {
              Expresion RESULT =null;
		int enleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int enright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion en = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT= new Not(en);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp_not",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // exp_not ::= comparacion 
            {
              Expresion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT= c;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp_not",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // comparacion ::= exp_arit IGUAL_IGUAL exp_arit 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new IgualIgual(e1,e2);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comparacion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // comparacion ::= exp_arit DISTINTO exp_arit 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new Distinto(e1,e2);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comparacion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // comparacion ::= exp_arit MAYOR_IGUAL exp_arit 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new MayorIgual(e1,e2);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comparacion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // comparacion ::= exp_arit MENOR_IGUAL exp_arit 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new MenorIgual(e1,e2);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comparacion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // comparacion ::= exp_arit MENOR exp_arit 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new Menor(e1,e2);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comparacion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // comparacion ::= exp_arit MAYOR exp_arit 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new Mayor(e1,e2);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comparacion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // comparacion ::= exp_arit 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT= e;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comparacion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // exp_arit ::= exp_arit MAS termino 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion t = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new Suma(e, t);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp_arit",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // exp_arit ::= exp_arit MENOS termino 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion t = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new Resta(e, t);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp_arit",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // exp_arit ::= termino 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion t = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = t;
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp_arit",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // termino ::= termino MULTIPLICAR factor 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion t = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new Multiplicacion(t, f);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("termino",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // termino ::= termino DIVIDIR factor 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion t = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new Division(t, f);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("termino",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // termino ::= factor 
            {
              Expresion RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = f;
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("termino",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // factor ::= APERTURA_PARENTESIS exp_or CIERRE_PARENTESIS 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT = e;
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("factor",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // factor ::= IDENTIFICADOR 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new Identificador(id);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("factor",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // factor ::= INTEGER_LITERAL 
            {
              Expresion RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String ent = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new Constante(ent, Tipo.INTEGER);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("factor",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // factor ::= FLOAT_LITERAL 
            {
              Expresion RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new Constante(f, Tipo.FLOAT);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("factor",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // factor ::= TRUE 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new Constante(t, Tipo.BOOL);;
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("factor",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // factor ::= FALSE 
            {
              Expresion RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new Constante(f, Tipo.BOOL);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("factor",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // factor ::= invocacion_funciones 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion i = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = i;
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("factor",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // factor ::= MENOS factor 
            {
              Expresion RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new MenosUnario(f);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("factor",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
