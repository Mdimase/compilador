
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compilador.sintactico;

import compilador.ast.base.*;
import compilador.ast.instrucciones.*;
import compilador.ast.operaciones.binarias.*;
import compilador.ast.operaciones.unarias.*;
import java.util.*;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SintacticoSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\144\000\002\002\004\000\002\015\004\000\002\015" +
    "\003\000\002\016\007\000\002\021\005\000\002\021\004" +
    "\000\002\021\004\000\002\021\003\000\002\026\012\000" +
    "\002\026\011\000\002\027\005\000\002\027\004\000\002" +
    "\027\003\000\002\030\005\000\002\030\002\000\002\031" +
    "\005\000\002\032\007\000\002\041\003\000\002\041\003" +
    "\000\002\041\003\000\002\041\003\000\002\020\004\000" +
    "\002\020\003\000\002\022\004\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\004\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\024\005\000\002" +
    "\025\006\000\002\025\010\000\002\033\005\000\002\037" +
    "\006\000\002\017\014\000\002\017\012\000\002\002\006" +
    "\000\002\002\005\000\002\014\005\000\002\014\003\000" +
    "\002\035\006\000\002\035\006\000\002\036\006\000\002" +
    "\036\006\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\042\007\000\002\042\005\000\002\043\004" +
    "\000\002\043\003\000\002\044\007\000\002\045\003\000" +
    "\002\045\003\000\002\045\003\000\002\045\003\000\002" +
    "\045\003\000\002\045\003\000\002\040\010\000\002\040" +
    "\006\000\002\003\003\000\002\005\003\000\002\007\005" +
    "\000\002\007\003\000\002\010\005\000\002\010\003\000" +
    "\002\011\004\000\002\011\003\000\002\004\005\000\002" +
    "\004\005\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\004\005\000\002\004\003\000\002\006\005" +
    "\000\002\006\005\000\002\006\003\000\002\012\005\000" +
    "\002\012\005\000\002\012\003\000\002\013\005\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\303\000\010\004\010\026\013\050\012\001\002\000" +
    "\010\004\010\026\013\050\012\001\002\000\010\004\ufffa" +
    "\026\ufffa\050\ufffa\001\002\000\004\022\301\001\002\000" +
    "\004\002\300\001\002\000\004\027\274\001\002\000\004" +
    "\002\uffff\001\002\000\004\057\120\001\002\000\004\057" +
    "\014\001\002\000\004\027\015\001\002\000\010\064\016" +
    "\065\020\066\021\001\002\000\046\013\uffcd\022\uffcd\026" +
    "\uffcd\027\uffcd\030\uffcd\031\uffcd\033\uffcd\035\uffcd\036\uffcd" +
    "\040\uffcd\041\uffcd\045\uffcd\046\uffcd\047\uffcd\051\uffcd\052" +
    "\uffcd\053\uffcd\057\uffcd\001\002\000\012\022\uffdb\027\uffdb" +
    "\030\022\035\uffdb\001\002\000\046\013\uffcc\022\uffcc\026" +
    "\uffcc\027\uffcc\030\uffcc\031\uffcc\033\uffcc\035\uffcc\036\uffcc" +
    "\040\uffcc\041\uffcc\045\uffcc\046\uffcc\047\uffcc\051\uffcc\052" +
    "\uffcc\053\uffcc\057\uffcc\001\002\000\046\013\uffcb\022\uffcb" +
    "\026\uffcb\027\uffcb\030\uffcb\031\uffcb\033\uffcb\035\uffcb\036" +
    "\uffcb\040\uffcb\041\uffcb\045\uffcb\046\uffcb\047\uffcb\051\uffcb" +
    "\052\uffcb\053\uffcb\057\uffcb\001\002\000\030\007\024\012" +
    "\025\025\027\042\032\043\023\044\033\057\043\060\044" +
    "\061\045\062\031\063\041\001\002\000\004\012\116\001" +
    "\002\000\026\007\024\012\025\042\032\043\023\044\033" +
    "\057\043\060\044\061\045\062\031\063\041\001\002\000" +
    "\030\007\024\012\025\025\027\042\032\043\023\044\033" +
    "\057\043\060\044\061\045\062\031\063\041\001\002\000" +
    "\010\022\uffda\027\uffda\035\uffda\001\002\000\030\007\024" +
    "\012\025\025\027\042\032\043\023\044\033\057\043\060" +
    "\044\061\045\062\031\063\041\001\002\000\044\006\072" +
    "\007\074\013\uffaf\014\077\015\076\016\101\017\100\020" +
    "\073\021\075\022\uffaf\023\uffaf\024\uffaf\027\uffaf\032\uffaf" +
    "\034\uffaf\035\uffaf\052\uffaf\001\002\000\050\006\uffa4\007" +
    "\uffa4\010\uffa4\011\uffa4\013\uffa4\014\uffa4\015\uffa4\016\uffa4" +
    "\017\uffa4\020\uffa4\021\uffa4\022\uffa4\023\uffa4\024\uffa4\027" +
    "\uffa4\032\uffa4\034\uffa4\035\uffa4\052\uffa4\001\002\000\004" +
    "\012\070\001\002\000\004\012\066\001\002\000\024\013" +
    "\uffba\022\uffba\023\uffba\024\051\027\uffba\032\uffba\034\uffba" +
    "\035\uffba\052\uffba\001\002\000\050\006\uffa9\007\uffa9\010" +
    "\uffa9\011\uffa9\013\uffa9\014\uffa9\015\uffa9\016\uffa9\017\uffa9" +
    "\020\uffa9\021\uffa9\022\uffa9\023\uffa9\024\uffa9\027\uffa9\032" +
    "\uffa9\034\uffa9\035\uffa9\052\uffa9\001\002\000\050\006\uffac" +
    "\007\uffac\010\063\011\062\013\uffac\014\uffac\015\uffac\016" +
    "\uffac\017\uffac\020\uffac\021\uffac\022\uffac\023\uffac\024\uffac" +
    "\027\uffac\032\uffac\034\uffac\035\uffac\052\uffac\001\002\000" +
    "\050\006\uffa2\007\uffa2\010\uffa2\011\uffa2\013\uffa2\014\uffa2" +
    "\015\uffa2\016\uffa2\017\uffa2\020\uffa2\021\uffa2\022\uffa2\023" +
    "\uffa2\024\uffa2\027\uffa2\032\uffa2\034\uffa2\035\uffa2\052\uffa2" +
    "\001\002\000\024\013\uffb8\022\uffb8\023\uffb8\024\uffb8\027" +
    "\uffb8\032\uffb8\034\uffb8\035\uffb8\052\uffb8\001\002\000\050" +
    "\006\uffa3\007\uffa3\010\uffa3\011\uffa3\013\uffa3\014\uffa3\015" +
    "\uffa3\016\uffa3\017\uffa3\020\uffa3\021\uffa3\022\uffa3\023\uffa3" +
    "\024\uffa3\027\uffa3\032\uffa3\034\uffa3\035\uffa3\052\uffa3\001" +
    "\002\000\024\013\uffb6\022\uffb6\023\uffb6\024\uffb6\027\uffb6" +
    "\032\uffb6\034\uffb6\035\uffb6\052\uffb6\001\002\000\052\006" +
    "\uffa7\007\uffa7\010\uffa7\011\uffa7\012\053\013\uffa7\014\uffa7" +
    "\015\uffa7\016\uffa7\017\uffa7\020\uffa7\021\uffa7\022\uffa7\023" +
    "\uffa7\024\uffa7\027\uffa7\032\uffa7\034\uffa7\035\uffa7\052\uffa7" +
    "\001\002\000\050\006\uffa6\007\uffa6\010\uffa6\011\uffa6\013" +
    "\uffa6\014\uffa6\015\uffa6\016\uffa6\017\uffa6\020\uffa6\021\uffa6" +
    "\022\uffa6\023\uffa6\024\uffa6\027\uffa6\032\uffa6\034\uffa6\035" +
    "\uffa6\052\uffa6\001\002\000\050\006\uffa5\007\uffa5\010\uffa5" +
    "\011\uffa5\013\uffa5\014\uffa5\015\uffa5\016\uffa5\017\uffa5\020" +
    "\uffa5\021\uffa5\022\uffa5\023\uffa5\024\uffa5\027\uffa5\032\uffa5" +
    "\034\uffa5\035\uffa5\052\uffa5\001\002\000\022\013\uffbc\022" +
    "\uffbc\023\047\027\uffbc\032\uffbc\034\uffbc\035\uffbc\052\uffbc" +
    "\001\002\000\030\007\024\012\025\025\027\042\032\043" +
    "\023\044\033\057\043\060\044\061\045\062\031\063\041" +
    "\001\002\000\024\013\uffbb\022\uffbb\023\uffbb\024\051\027" +
    "\uffbb\032\uffbb\034\uffbb\035\uffbb\052\uffbb\001\002\000\030" +
    "\007\024\012\025\025\027\042\032\043\023\044\033\057" +
    "\043\060\044\061\045\062\031\063\041\001\002\000\024" +
    "\013\uffb9\022\uffb9\023\uffb9\024\uffb9\027\uffb9\032\uffb9\034" +
    "\uffb9\035\uffb9\052\uffb9\001\002\000\032\007\024\012\025" +
    "\013\056\025\027\042\032\043\023\044\033\057\043\060" +
    "\044\061\045\062\031\063\041\001\002\000\006\013\uffd2" +
    "\052\uffd2\001\002\000\006\013\060\052\057\001\002\000" +
    "\050\006\uffd4\007\uffd4\010\uffd4\011\uffd4\013\uffd4\014\uffd4" +
    "\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023" +
    "\uffd4\024\uffd4\027\uffd4\032\uffd4\034\uffd4\035\uffd4\052\uffd4" +
    "\001\002\000\030\007\024\012\025\025\027\042\032\043" +
    "\023\044\033\057\043\060\044\061\045\062\031\063\041" +
    "\001\002\000\050\006\uffd5\007\uffd5\010\uffd5\011\uffd5\013" +
    "\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5" +
    "\022\uffd5\023\uffd5\024\uffd5\027\uffd5\032\uffd5\034\uffd5\035" +
    "\uffd5\052\uffd5\001\002\000\006\013\uffd3\052\uffd3\001\002" +
    "\000\026\007\024\012\025\042\032\043\023\044\033\057" +
    "\043\060\044\061\045\062\031\063\041\001\002\000\026" +
    "\007\024\012\025\042\032\043\023\044\033\057\043\060" +
    "\044\061\045\062\031\063\041\001\002\000\050\006\uffab" +
    "\007\uffab\010\uffab\011\uffab\013\uffab\014\uffab\015\uffab\016" +
    "\uffab\017\uffab\020\uffab\021\uffab\022\uffab\023\uffab\024\uffab" +
    "\027\uffab\032\uffab\034\uffab\035\uffab\052\uffab\001\002\000" +
    "\050\006\uffaa\007\uffaa\010\uffaa\011\uffaa\013\uffaa\014\uffaa" +
    "\015\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023" +
    "\uffaa\024\uffaa\027\uffaa\032\uffaa\034\uffaa\035\uffaa\052\uffaa" +
    "\001\002\000\004\013\067\001\002\000\050\006\uff9f\007" +
    "\uff9f\010\uff9f\011\uff9f\013\uff9f\014\uff9f\015\uff9f\016\uff9f" +
    "\017\uff9f\020\uff9f\021\uff9f\022\uff9f\023\uff9f\024\uff9f\027" +
    "\uff9f\032\uff9f\034\uff9f\035\uff9f\052\uff9f\001\002\000\004" +
    "\013\071\001\002\000\050\006\uffa1\007\uffa1\010\uffa1\011" +
    "\uffa1\013\uffa1\014\uffa1\015\uffa1\016\uffa1\017\uffa1\020\uffa1" +
    "\021\uffa1\022\uffa1\023\uffa1\024\uffa1\027\uffa1\032\uffa1\034" +
    "\uffa1\035\uffa1\052\uffa1\001\002\000\026\007\024\012\025" +
    "\042\032\043\023\044\033\057\043\060\044\061\045\062" +
    "\031\063\041\001\002\000\026\007\024\012\025\042\032" +
    "\043\023\044\033\057\043\060\044\061\045\062\031\063" +
    "\041\001\002\000\026\007\024\012\025\042\032\043\023" +
    "\044\033\057\043\060\044\061\045\062\031\063\041\001" +
    "\002\000\026\007\024\012\025\042\032\043\023\044\033" +
    "\057\043\060\044\061\045\062\031\063\041\001\002\000" +
    "\026\007\024\012\025\042\032\043\023\044\033\057\043" +
    "\060\044\061\045\062\031\063\041\001\002\000\026\007" +
    "\024\012\025\042\032\043\023\044\033\057\043\060\044" +
    "\061\045\062\031\063\041\001\002\000\026\007\024\012" +
    "\025\042\032\043\023\044\033\057\043\060\044\061\045" +
    "\062\031\063\041\001\002\000\026\007\024\012\025\042" +
    "\032\043\023\044\033\057\043\060\044\061\045\062\031" +
    "\063\041\001\002\000\030\006\072\007\074\013\uffb3\022" +
    "\uffb3\023\uffb3\024\uffb3\027\uffb3\032\uffb3\034\uffb3\035\uffb3" +
    "\052\uffb3\001\002\000\030\006\072\007\074\013\uffb2\022" +
    "\uffb2\023\uffb2\024\uffb2\027\uffb2\032\uffb2\034\uffb2\035\uffb2" +
    "\052\uffb2\001\002\000\030\006\072\007\074\013\uffb0\022" +
    "\uffb0\023\uffb0\024\uffb0\027\uffb0\032\uffb0\034\uffb0\035\uffb0" +
    "\052\uffb0\001\002\000\030\006\072\007\074\013\uffb1\022" +
    "\uffb1\023\uffb1\024\uffb1\027\uffb1\032\uffb1\034\uffb1\035\uffb1" +
    "\052\uffb1\001\002\000\030\006\072\007\074\013\uffb4\022" +
    "\uffb4\023\uffb4\024\uffb4\027\uffb4\032\uffb4\034\uffb4\035\uffb4" +
    "\052\uffb4\001\002\000\050\006\uffad\007\uffad\010\063\011" +
    "\062\013\uffad\014\uffad\015\uffad\016\uffad\017\uffad\020\uffad" +
    "\021\uffad\022\uffad\023\uffad\024\uffad\027\uffad\032\uffad\034" +
    "\uffad\035\uffad\052\uffad\001\002\000\030\006\072\007\074" +
    "\013\uffb5\022\uffb5\023\uffb5\024\uffb5\027\uffb5\032\uffb5\034" +
    "\uffb5\035\uffb5\052\uffb5\001\002\000\050\006\uffae\007\uffae" +
    "\010\063\011\062\013\uffae\014\uffae\015\uffae\016\uffae\017" +
    "\uffae\020\uffae\021\uffae\022\uffae\023\uffae\024\uffae\027\uffae" +
    "\032\uffae\034\uffae\035\uffae\052\uffae\001\002\000\024\013" +
    "\uffb7\022\uffb7\023\uffb7\024\uffb7\027\uffb7\032\uffb7\034\uffb7" +
    "\035\uffb7\052\uffb7\001\002\000\006\013\114\023\047\001" +
    "\002\000\050\006\uffa8\007\uffa8\010\uffa8\011\uffa8\013\uffa8" +
    "\014\uffa8\015\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8\022" +
    "\uffa8\023\uffa8\024\uffa8\027\uffa8\032\uffa8\034\uffa8\035\uffa8" +
    "\052\uffa8\001\002\000\050\006\uff9e\007\uff9e\010\uff9e\011" +
    "\uff9e\013\uff9e\014\uff9e\015\uff9e\016\uff9e\017\uff9e\020\uff9e" +
    "\021\uff9e\022\uff9e\023\uff9e\024\uff9e\027\uff9e\032\uff9e\034" +
    "\uff9e\035\uff9e\052\uff9e\001\002\000\004\013\117\001\002" +
    "\000\050\006\uffa0\007\uffa0\010\uffa0\011\uffa0\013\uffa0\014" +
    "\uffa0\015\uffa0\016\uffa0\017\uffa0\020\uffa0\021\uffa0\022\uffa0" +
    "\023\uffa0\024\uffa0\027\uffa0\032\uffa0\034\uffa0\035\uffa0\052" +
    "\uffa0\001\002\000\004\012\121\001\002\000\006\013\124" +
    "\057\123\001\002\000\004\013\270\001\002\000\004\027" +
    "\266\001\002\000\004\051\146\001\002\000\006\013\ufff5" +
    "\052\144\001\002\000\006\013\ufff3\052\127\001\002\000" +
    "\004\057\131\001\002\000\004\013\ufff6\001\002\000\004" +
    "\027\134\001\002\000\006\013\ufff3\052\127\001\002\000" +
    "\004\013\ufff4\001\002\000\010\064\016\065\020\066\021" +
    "\001\002\000\004\030\136\001\002\000\012\060\137\061" +
    "\141\062\140\063\142\001\002\000\006\013\ufff0\052\ufff0" +
    "\001\002\000\006\013\uffee\052\uffee\001\002\000\006\013" +
    "\uffef\052\uffef\001\002\000\006\013\uffed\052\uffed\001\002" +
    "\000\006\013\ufff1\052\ufff1\001\002\000\004\057\123\001" +
    "\002\000\004\013\ufff7\001\002\000\010\064\016\065\020" +
    "\066\021\001\002\000\032\026\013\031\151\033\160\036" +
    "\163\040\162\041\153\045\170\046\171\047\150\051\154" +
    "\053\176\057\172\001\002\000\010\022\uffe1\027\uffe1\035" +
    "\uffe1\001\002\000\030\007\024\012\025\025\027\042\032" +
    "\043\023\044\033\057\043\060\044\061\045\062\031\063" +
    "\041\001\002\000\010\022\uffde\027\uffde\035\uffde\001\002" +
    "\000\004\012\256\001\002\000\030\007\024\012\025\025" +
    "\027\042\032\043\023\044\033\057\043\060\044\061\045" +
    "\062\031\063\041\001\002\000\010\022\uffe6\027\uffe6\035" +
    "\uffe6\001\002\000\004\022\254\001\002\000\010\022\uffdd" +
    "\027\uffdd\035\uffdd\001\002\000\030\007\024\012\025\025" +
    "\027\042\032\043\023\044\033\057\043\060\044\061\045" +
    "\062\031\063\041\001\002\000\010\022\uffe4\027\uffe4\035" +
    "\uffe4\001\002\000\004\012\241\001\002\000\032\026\013" +
    "\031\151\033\160\036\163\040\162\041\153\045\170\046" +
    "\171\047\150\051\154\053\176\057\172\001\002\000\010" +
    "\004\ufff8\026\ufff8\050\ufff8\001\002\000\010\022\uffe7\027" +
    "\uffe7\035\uffe7\001\002\000\010\022\uffe5\027\uffe5\035\uffe5" +
    "\001\002\000\010\022\uffe9\027\uffe9\035\uffe9\001\002\000" +
    "\030\007\024\012\025\025\027\042\032\043\023\044\033" +
    "\057\043\060\044\061\045\062\031\063\041\001\002\000" +
    "\010\022\uffe2\027\uffe2\035\uffe2\001\002\000\006\012\053" +
    "\030\212\001\002\000\010\022\uffe8\027\uffe8\035\uffe8\001" +
    "\002\000\010\022\uffe3\027\uffe3\035\uffe3\001\002\000\010" +
    "\022\uffdf\027\uffdf\035\uffdf\001\002\000\004\057\177\001" +
    "\002\000\004\056\200\001\002\000\004\060\201\001\002" +
    "\000\004\055\202\001\002\000\004\060\203\001\002\000" +
    "\006\032\204\054\205\001\002\000\032\026\013\031\151" +
    "\033\160\036\163\040\162\041\153\045\170\046\171\047" +
    "\150\051\154\053\176\057\172\001\002\000\004\060\206" +
    "\001\002\000\004\032\207\001\002\000\032\026\013\031" +
    "\151\033\160\036\163\040\162\041\153\045\170\046\171" +
    "\047\150\051\154\053\176\057\172\001\002\000\010\022" +
    "\uffd7\027\uffd7\035\uffd7\001\002\000\010\022\uffd6\027\uffd6" +
    "\035\uffd6\001\002\000\030\007\024\012\025\025\027\042" +
    "\032\043\023\044\033\057\043\060\044\061\045\062\031" +
    "\063\041\001\002\000\010\022\uffd9\027\uffd9\035\uffd9\001" +
    "\002\000\004\027\216\001\002\000\010\022\uffc9\027\216" +
    "\035\232\001\002\000\016\014\224\015\222\016\226\017" +
    "\223\020\220\021\221\001\002\000\010\022\uffc7\027\uffc7" +
    "\035\uffc7\001\002\000\030\007\uffc1\012\uffc1\025\uffc1\042" +
    "\uffc1\043\uffc1\044\uffc1\057\uffc1\060\uffc1\061\uffc1\062\uffc1" +
    "\063\uffc1\001\002\000\030\007\uffc0\012\uffc0\025\uffc0\042" +
    "\uffc0\043\uffc0\044\uffc0\057\uffc0\060\uffc0\061\uffc0\062\uffc0" +
    "\063\uffc0\001\002\000\030\007\uffc5\012\uffc5\025\uffc5\042" +
    "\uffc5\043\uffc5\044\uffc5\057\uffc5\060\uffc5\061\uffc5\062\uffc5" +
    "\063\uffc5\001\002\000\030\007\uffc4\012\uffc4\025\uffc4\042" +
    "\uffc4\043\uffc4\044\uffc4\057\uffc4\060\uffc4\061\uffc4\062\uffc4" +
    "\063\uffc4\001\002\000\030\007\uffc3\012\uffc3\025\uffc3\042" +
    "\uffc3\043\uffc3\044\uffc3\057\uffc3\060\uffc3\061\uffc3\062\uffc3" +
    "\063\uffc3\001\002\000\030\007\024\012\025\025\027\042" +
    "\032\043\023\044\033\057\043\060\044\061\045\062\031" +
    "\063\041\001\002\000\030\007\uffc2\012\uffc2\025\uffc2\042" +
    "\uffc2\043\uffc2\044\uffc2\057\uffc2\060\uffc2\061\uffc2\062\uffc2" +
    "\063\uffc2\001\002\000\004\034\230\001\002\000\032\026" +
    "\013\031\151\033\160\036\163\040\162\041\153\045\170" +
    "\046\171\047\150\051\154\053\176\057\172\001\002\000" +
    "\010\022\uffc6\027\uffc6\035\uffc6\001\002\000\032\026\013" +
    "\031\151\033\160\036\163\040\162\041\153\045\170\046" +
    "\171\047\150\051\154\053\176\057\172\001\002\000\010" +
    "\022\uffc8\027\uffc8\035\uffc8\001\002\000\010\022\uffca\027" +
    "\uffca\035\uffca\001\002\000\034\026\013\031\151\033\160" +
    "\036\163\037\237\040\162\041\153\045\170\046\171\047" +
    "\150\051\154\053\176\057\172\001\002\000\034\026\uffeb" +
    "\031\uffeb\033\uffeb\036\uffeb\037\uffeb\040\uffeb\041\uffeb\045" +
    "\uffeb\046\uffeb\047\uffeb\051\uffeb\053\uffeb\057\uffeb\001\002" +
    "\000\010\022\uffdc\027\uffdc\035\uffdc\001\002\000\034\026" +
    "\uffec\031\uffec\033\uffec\036\uffec\037\uffec\040\uffec\041\uffec" +
    "\045\uffec\046\uffec\047\uffec\051\uffec\053\uffec\057\uffec\001" +
    "\002\000\032\007\024\012\025\025\027\042\032\043\023" +
    "\044\033\057\043\060\044\061\045\062\031\063\041\067" +
    "\243\001\002\000\004\013\245\001\002\000\004\013\244" +
    "\001\002\000\010\022\uffd0\027\uffd0\035\uffd0\001\002\000" +
    "\010\022\uffd1\027\uffd1\035\uffd1\001\002\000\004\034\250" +
    "\001\002\000\006\032\uffbd\034\uffbd\001\002\000\032\026" +
    "\013\031\151\033\160\036\163\040\162\041\153\045\170" +
    "\046\171\047\150\051\154\053\176\057\172\001\002\000" +
    "\010\022\uffbe\027\uffbe\035\252\001\002\000\032\026\013" +
    "\031\151\033\160\036\163\040\162\041\153\045\170\046" +
    "\171\047\150\051\154\053\176\057\172\001\002\000\010" +
    "\022\uffbf\027\uffbf\035\uffbf\001\002\000\040\004\uffea\026" +
    "\uffea\031\uffea\033\uffea\036\uffea\037\uffea\040\uffea\041\uffea" +
    "\045\uffea\046\uffea\047\uffea\050\uffea\051\uffea\053\uffea\057" +
    "\uffea\001\002\000\010\022\uffe0\027\uffe0\035\uffe0\001\002" +
    "\000\032\007\024\012\025\025\027\042\032\043\023\044" +
    "\033\057\043\060\044\061\045\062\031\063\041\067\260" +
    "\001\002\000\004\013\262\001\002\000\004\013\261\001" +
    "\002\000\010\022\uffce\027\uffce\035\uffce\001\002\000\010" +
    "\022\uffcf\027\uffcf\035\uffcf\001\002\000\004\032\264\001" +
    "\002\000\032\026\013\031\151\033\160\036\163\040\162" +
    "\041\153\045\170\046\171\047\150\051\154\053\176\057" +
    "\172\001\002\000\010\022\uffd8\027\uffd8\035\uffd8\001\002" +
    "\000\010\064\016\065\020\066\021\001\002\000\010\013" +
    "\ufff2\030\136\052\ufff2\001\002\000\004\051\271\001\002" +
    "\000\010\064\016\065\020\066\021\001\002\000\032\026" +
    "\013\031\151\033\160\036\163\040\162\041\153\045\170" +
    "\046\171\047\150\051\154\053\176\057\172\001\002\000" +
    "\010\004\ufff9\026\ufff9\050\ufff9\001\002\000\032\026\013" +
    "\031\151\033\160\036\163\040\162\041\153\045\170\046" +
    "\171\047\150\051\154\053\176\057\172\001\002\000\034" +
    "\026\013\031\151\033\160\036\163\037\276\040\162\041" +
    "\153\045\170\046\171\047\150\051\154\053\176\057\172" +
    "\001\002\000\004\005\277\001\002\000\004\002\ufffe\001" +
    "\002\000\004\002\001\001\002\000\010\004\ufffc\026\ufffc" +
    "\050\ufffc\001\002\000\010\004\ufffb\026\ufffb\050\ufffb\001" +
    "\002\000\004\022\305\001\002\000\004\002\000\001\002" +
    "\000\010\004\ufffd\026\ufffd\050\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\303\000\014\015\006\016\010\021\003\025\005\026" +
    "\004\001\001\000\010\016\303\025\302\026\301\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\034\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\002\036\004\041\005\025\006\027\007" +
    "\045\010\033\011\037\012\035\013\034\001\001\000\002" +
    "\001\001\000\006\002\036\013\114\001\001\000\022\002" +
    "\036\004\041\006\027\007\112\010\033\011\037\012\035" +
    "\013\034\001\001\000\002\001\001\000\016\002\036\004" +
    "\041\006\027\011\111\012\035\013\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\002\036\004\041\006" +
    "\027\010\047\011\037\012\035\013\034\001\001\000\002" +
    "\001\001\000\016\002\036\004\041\006\027\011\051\012" +
    "\035\013\034\001\001\000\002\001\001\000\026\002\036" +
    "\004\041\005\053\006\027\007\045\010\033\011\037\012" +
    "\035\013\034\014\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\002\036\004\041\005" +
    "\060\006\027\007\045\010\033\011\037\012\035\013\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\002" +
    "\036\013\064\001\001\000\006\002\036\013\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\002\036\012\110\013\034\001\001\000\012\002\036\006" +
    "\107\012\035\013\034\001\001\000\010\002\036\012\106" +
    "\013\034\001\001\000\012\002\036\006\105\012\035\013" +
    "\034\001\001\000\012\002\036\006\104\012\035\013\034" +
    "\001\001\000\012\002\036\006\103\012\035\013\034\001" +
    "\001\000\012\002\036\006\102\012\035\013\034\001\001" +
    "\000\012\002\036\006\101\012\035\013\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\027\121\031\124" +
    "\032\125\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\030\127\001\001" +
    "\000\004\032\131\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\030\132\001\001\000\002\001\001\000\004" +
    "\034\134\001\001\000\002\001\001\000\004\041\142\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\027\144\031" +
    "\124\032\125\001\001\000\002\001\001\000\004\034\146" +
    "\001\001\000\032\002\165\017\172\022\163\023\155\024" +
    "\156\025\173\033\160\035\174\036\151\037\166\040\164" +
    "\042\154\001\001\000\002\001\001\000\026\002\036\003" +
    "\262\004\041\005\246\006\027\007\045\010\033\011\037" +
    "\012\035\013\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\002\036\004\041\005\254\006\027\007\045" +
    "\010\033\011\037\012\035\013\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\002\036" +
    "\003\245\004\041\005\246\006\027\007\045\010\033\011" +
    "\037\012\035\013\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\002\165\017\172\020\234\022\235\023" +
    "\155\024\156\025\173\033\160\035\174\036\151\037\166" +
    "\040\164\042\154\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\002\036" +
    "\004\041\005\213\006\027\007\045\010\033\011\037\012" +
    "\035\013\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\002" +
    "\165\017\172\023\210\024\156\025\173\033\160\035\174" +
    "\036\151\037\166\040\164\042\154\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\002\165\017\172\023\207" +
    "\024\156\025\173\033\160\035\174\036\151\037\166\040" +
    "\164\042\154\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\002\036\004\041\005\212\006\027\007\045\010" +
    "\033\011\037\012\035\013\034\001\001\000\002\001\001" +
    "\000\006\043\214\044\216\001\001\000\004\044\232\001" +
    "\001\000\004\045\224\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\002\036\004\041\005\226" +
    "\006\027\007\045\010\033\011\037\012\035\013\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\002\165" +
    "\017\172\023\230\024\156\025\173\033\160\035\174\036" +
    "\151\037\166\040\164\042\154\001\001\000\002\001\001" +
    "\000\030\002\165\017\172\023\233\024\156\025\173\033" +
    "\160\035\174\036\151\037\166\040\164\042\154\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\002\165\017" +
    "\172\022\237\023\155\024\156\025\173\033\160\035\174" +
    "\036\151\037\166\040\164\042\154\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\002\036" +
    "\004\041\005\241\006\027\007\045\010\033\011\037\012" +
    "\035\013\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\002\165\017\172\023\250\024\156" +
    "\025\173\033\160\035\174\036\151\037\166\040\164\042" +
    "\154\001\001\000\002\001\001\000\030\002\165\017\172" +
    "\023\252\024\156\025\173\033\160\035\174\036\151\037" +
    "\166\040\164\042\154\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\002\036\004\041\005" +
    "\256\006\027\007\045\010\033\011\037\012\035\013\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\002\165" +
    "\017\172\023\264\024\156\025\173\033\160\035\174\036" +
    "\151\037\166\040\164\042\154\001\001\000\002\001\001" +
    "\000\004\034\266\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\034\271\001\001\000\032\002\165\017\172" +
    "\022\272\023\155\024\156\025\173\033\160\035\174\036" +
    "\151\037\166\040\164\042\154\001\001\000\002\001\001" +
    "\000\034\002\165\017\172\020\274\022\235\023\155\024" +
    "\156\025\173\033\160\035\174\036\151\037\166\040\164" +
    "\042\154\001\001\000\032\002\165\017\172\022\237\023" +
    "\155\024\156\025\173\033\160\035\174\036\151\037\166" +
    "\040\164\042\154\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /*
    public void syntax_error(Symbol s) {
        System.out.println("Error en la línea " + (s.right+1) + ", columna " + s.left + ": "
            + SintacticoSym.terminalNames[s.sym] + "(" + s.value + ") no reconocido.");
    }   */

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
            System.out.println("Error en la linea "+ (s.left+1)+ " Columna "+ s.right+ ". Valor simbolo '"
            +s.value+"' . Simbolo n° "+s.sym+ " no reconocido." );
        }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {




  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Programa start_val = (Programa)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= declaraciones bloque_main 
            {
              Programa RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		List<Sentencia> d = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bmleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bmright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Bloque bm = (Bloque)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            Bloque declaraciones = new Bloque(d,"DECLARACIONES",false);
            RESULT = new Programa(declaraciones,bm);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("programa",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= bloque_main 
            {
              Programa RESULT =null;
		int bmleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bmright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Bloque bm = (Bloque)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new Programa(bm);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("programa",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // bloque_main ::= MAIN IS sentencias END PUNTO 
            {
              Bloque RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		List<Sentencia> ss = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
            RESULT = new Bloque(ss,"MAIN",true);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bloque_main",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaraciones ::= declaraciones declaracion_variable PUNTO_COMA 
            {
              List<Sentencia> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		List<Sentencia> d = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int dvleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		DeclaracionVariable dv = (DeclaracionVariable)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            d.add(dv);
            RESULT= d;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaraciones",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaraciones ::= declaracion_variable PUNTO_COMA 
            {
              List<Sentencia> RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		DeclaracionVariable dv = (DeclaracionVariable)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            List<Sentencia> ds = new ArrayList<>();
            ds.add(dv);
            RESULT= ds;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaraciones",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaraciones ::= declaraciones declaracion_funcion 
            {
              List<Sentencia> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		List<Sentencia> d = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int dfleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		DeclaracionFuncion df = (DeclaracionFuncion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            d.add(df);
            RESULT= d;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaraciones",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaraciones ::= declaracion_funcion 
            {
              List<Sentencia> RESULT =null;
		int dfleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		DeclaracionFuncion df = (DeclaracionFuncion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            List<Sentencia> dfs = new ArrayList<>();
            dfs.add(df);
            RESULT= dfs;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaraciones",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracion_funcion ::= FUNCTION IDENTIFICADOR APERTURA_PARENTESIS parametros CIERRE_PARENTESIS RETURN tipo sentencia 
            {
              DeclaracionFuncion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		List<Parametro> p = (List<Parametro>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Sentencia s = (Sentencia)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            Identificador identificador = new Identificador(id,t);
            List<Sentencia> aux = new ArrayList<Sentencia>();
            aux.add(s);
            Bloque bloque = new Bloque(aux,false);
            RESULT= new DeclaracionFuncion(identificador,t,p,bloque);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracion_funcion ::= FUNCTION IDENTIFICADOR APERTURA_PARENTESIS CIERRE_PARENTESIS RETURN tipo sentencia 
            {
              DeclaracionFuncion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Sentencia s = (Sentencia)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            Identificador identificador = new Identificador(id,t);
            List<Sentencia> aux = new ArrayList<Sentencia>();
            aux.add(s);
            Bloque bloque = new Bloque(aux,false);
            RESULT= new DeclaracionFuncion(identificador,t,bloque);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // parametros ::= parametro COMA parametros 
            {
              List<Parametro> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int ppleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		List<Parametro> pp = (List<Parametro>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            pp.add(p);
            RESULT = pp;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametros",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // parametros ::= parametro_con_v_defecto parametros_con_v_defecto 
            {
              List<Parametro> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int ppleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		List<Parametro> pp = (List<Parametro>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            pp.add(p);
            RESULT = pp;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametros",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // parametros ::= parametro 
            {
              List<Parametro> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            List<Parametro> ps = new ArrayList<>();
            ps.add(p);
            RESULT= ps;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametros",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // parametros_con_v_defecto ::= COMA parametro_con_v_defecto parametros_con_v_defecto 
            {
              List<Parametro> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int ppleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		List<Parametro> pp = (List<Parametro>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            pp.add(p);
            RESULT=pp;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametros_con_v_defecto",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // parametros_con_v_defecto ::= 
            {
              List<Parametro> RESULT =null;
		
            List<Parametro> pvs = new ArrayList<>();
            RESULT= pvs;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametros_con_v_defecto",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // parametro ::= IDENTIFICADOR IS tipo 
            {
              Parametro RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            Identificador identificador = new Identificador(id,t);
            RESULT= new Parametro(t,identificador);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametro",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // parametro_con_v_defecto ::= IDENTIFICADOR IS tipo IGUAL valor_defecto 
            {
              Parametro RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Constante v = (Constante)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            Identificador identificador = new Identificador(id,t);
            RESULT= new Parametro(t,identificador,v);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametro_con_v_defecto",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // valor_defecto ::= INTEGER_LITERAL 
            {
              Constante RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT= new Constante(i, Tipo.INTEGER);

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valor_defecto",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // valor_defecto ::= FLOAT_LITERAL 
            {
              Constante RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT= new Constante (f, Tipo.FLOAT);

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valor_defecto",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // valor_defecto ::= TRUE 
            {
              Constante RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT=new Constante(t,Tipo.BOOL);

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valor_defecto",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // valor_defecto ::= FALSE 
            {
              Constante RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT= new Constante(f,Tipo.BOOL);

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valor_defecto",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentencias ::= sentencias sentencia 
            {
              List<Sentencia> RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		List<Sentencia> ss = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Sentencia s = (Sentencia)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            ss.add(s);
            RESULT= ss;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencias",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentencias ::= sentencia 
            {
              List<Sentencia> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Sentencia s = (Sentencia)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            List<Sentencia> ls = new ArrayList<>();
            ls.add(s);
            RESULT= ls;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencias",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sentencia ::= instruccion PUNTO_COMA 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Sentencia i = (Sentencia)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT=i;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instruccion ::= while 
            {
              Sentencia RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		While w = (While)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=w;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // instruccion ::= for 
            {
              Sentencia RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Bloque f = (Bloque)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=f;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instruccion ::= if 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		If i = (If)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=i;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instruccion ::= when 
            {
              Sentencia RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		When w = (When)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=w;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // instruccion ::= invocacion_funciones 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion i = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=(Sentencia) i;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // instruccion ::= asignacion 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Asignacion a = (Asignacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=a;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // instruccion ::= declaracion_variable 
            {
              Sentencia RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		DeclaracionVariable d = (DeclaracionVariable)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=d;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // instruccion ::= BREAK 
            {
              Sentencia RESULT =null;
		
            RESULT= new Break("BREAK");
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // instruccion ::= CONTINUE 
            {
              Sentencia RESULT =null;
		
            RESULT= new Continue("CONTINUE");
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // instruccion ::= RETURN expresion 
            {
              Sentencia RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT= new Return(e);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // instruccion ::= write 
            {
              Sentencia RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Write w = (Write)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=w;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // instruccion ::= writeln 
            {
              Sentencia RESULT =null;
		int wlnleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int wlnright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Write wln = (Write)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=wln;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // instruccion ::= bloque 
            {
              Sentencia RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=b;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // bloque ::= BEGIN sentencias END 
            {
              Sentencia RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		List<Sentencia> ss = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT = new Bloque (ss,"BLOQUE",false);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bloque",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // declaracion_variable ::= VARIABLE IDENTIFICADOR IS tipo 
            {
              DeclaracionVariable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            Identificador identificador = new Identificador(id,t);
            RESULT= new DeclaracionVariable(identificador,t);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion_variable",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // declaracion_variable ::= VARIABLE IDENTIFICADOR IS tipo IGUAL expresion 
            {
              DeclaracionVariable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            Identificador identificador = new Identificador(id,t);
            RESULT= new DeclaracionVariable(identificador,t,e);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion_variable",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // asignacion ::= IDENTIFICADOR IGUAL expresion 
            {
              Asignacion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                   Identificador ident = new Identificador(id);
                   RESULT = new Asignacion(ident,e);
              
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacion",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // while ::= WHILE condicion DO instruccion 
            {
              While RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Sentencia i = (Sentencia)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            List<Sentencia> aux = new ArrayList<Sentencia>();
            aux.add(i);
            Bloque bloque = new Bloque(aux,"BLOQUE_WHILE",false);
            RESULT= new While("WHILE",c, bloque);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("while",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // for ::= FOR IDENTIFICADOR FROM INTEGER_LITERAL TO INTEGER_LITERAL BY INTEGER_LITERAL DO instruccion 
            {
              Bloque RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Sentencia i = (Sentencia)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
/*
            Identificador identificador = new Identificador(id);
            Constante from = new Constante(f, Tipo.INTEGER);
            Constante to = new Constante(t, Tipo.INTEGER);
            Constante by = new Constante(b, Tipo.INTEGER);
            List<Sentencia> aux = new ArrayList<Sentencia>();
            aux.add(i);
            Bloque bloque = new Bloque(aux,"FOR",false);
            RESULT= new For(identificador,from,to,by,bloque);
*/

            List<Sentencia> cuerpoFor = new ArrayList<Sentencia>(); //lista de sentencias del bloque principal
            Expresion from = new Constante(f, Tipo.INTEGER);    //constante from
            Identificador identificador = new Identificador(id);    //identificador
            Sentencia as = new Asignacion(identificador,from);  //primera asignacion id=f;
            cuerpoFor.add(as);  //agrego esa sentencia al bloque principal
            List<Sentencia> aux = new ArrayList<Sentencia>();   //lista de sentencias del bloque while interno
            aux.add(i); //agrego todas las sentencias que eran del for original
            Expresion by = new Constante(b, Tipo.INTEGER);  //constante by
            Expresion to = new Constante(t,Tipo.INTEGER);   //constante to

            if (Integer.valueOf(f) < Integer.valueOf(t)){
                Expresion exp = new Suma(identificador,by); //expresion usada en la asignacion id+by;
                Sentencia asig = new Asignacion(identificador,exp); // asignacion id=id+by;
                aux.add(asig);  //agrego la asignacion a la lista de sentencias del bloque while interno
                Expresion condicion = new MenorIgual(identificador,to); //condicion del while interno

                Bloque bloque = new Bloque(aux,"BLOQUEAUX",false);  //bloque de sentencias del while interno

                While w = new While("WHILE",condicion,bloque);  // while interno completo
                cuerpoFor.add(w);   //agrego el while completo a la lista de sentencias del cuerpo de mi for original
            } else {
                Expresion exp = new Resta(identificador,by); //expresion usada en la asignacion id+by;
                Sentencia asig = new Asignacion(identificador,exp); // asignacion id=id+by;
                aux.add(asig);  //agrego la asignacion a la lista de sentencias del bloque while interno
                Expresion condicion = new MenorIgual(to,identificador); //condicion del while interno

                Bloque bloque = new Bloque(aux,"BLOQUE",false);  //bloque de sentencias del while interno

                While w = new While("WHILE",condicion,bloque);  // while interno completo
                cuerpoFor.add(w);   //agrego el while completo a la lista de sentencias del cuerpo de mi for original
            }
            RESULT = new Bloque (cuerpoFor,"FOR->WHILE",false);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("for",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // for ::= FOR IDENTIFICADOR FROM INTEGER_LITERAL TO INTEGER_LITERAL DO instruccion 
            {
              Bloque RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Sentencia i = (Sentencia)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
/*
            Identificador identificador = new Identificador(id);
            Constante from = new Constante(f, Tipo.INTEGER);
            Constante to = new Constante(t, Tipo.INTEGER);
            Constante by = new Constante(String.valueOf(1), Tipo.INTEGER);
            List<Sentencia> aux = new ArrayList<Sentencia>();
            aux.add(i);
            Bloque bloque = new Bloque(aux,"FOR",false);
            RESULT= new For(identificador,from,to,by,bloque);
*/

            List<Sentencia> cuerpoFor = new ArrayList<Sentencia>(); //lista de sentencias del bloque principal
            Expresion from = new Constante(f, Tipo.INTEGER);    //constante from
            Identificador identificador = new Identificador(id);    //identificador
            Sentencia as = new Asignacion(identificador,from);  //primera asignacion id=f;
            cuerpoFor.add(as);  //agrego esa sentencia al bloque principal

            List<Sentencia> aux = new ArrayList<Sentencia>();   //lista de sentencias del bloque while interno
            aux.add(i); //agrego todas las sentencias que eran del for original
            Expresion by = new Constante(String.valueOf(1), Tipo.INTEGER);  //constante by
            Expresion to = new Constante(t,Tipo.INTEGER);   //constante to

            if (Integer.valueOf(f) < Integer.valueOf(t)){
                Expresion exp = new Suma(identificador,by); //expresion usada en la asignacion id+by;
                Sentencia asig = new Asignacion(identificador,exp); // asignacion id=id+by;
                aux.add(asig);  //agrego la asignacion a la lista de sentencias del bloque while interno
                Expresion condicion = new MenorIgual(identificador,to); //condicion del while interno

                Bloque bloque = new Bloque(aux,"BLOQUEAUX",false);  //bloque de sentencias del while interno

                While w = new While("WHILE",condicion,bloque);  // while interno completo
                cuerpoFor.add(w);   //agrego el while completo a la lista de sentencias del cuerpo de mi for original
            } else {
                    Expresion exp = new Resta(identificador,by); //expresion usada en la asignacion id+by;
                    Sentencia asig = new Asignacion(identificador,exp); // asignacion id=id+by;
                    aux.add(asig);  //agrego la asignacion a la lista de sentencias del bloque while interno
                    Expresion condicion = new MenorIgual(to,identificador); //condicion del while interno

                    Bloque bloque = new Bloque(aux,"BLOQUE",false);  //bloque de sentencias del while interno

                    While w = new While("WHILE",condicion,bloque);  // while interno completo
                    cuerpoFor.add(w);   //agrego el while completo a la lista de sentencias del cuerpo de mi for original
            }

            RESULT = new Bloque (cuerpoFor,"FOR->WHILE",false);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("for",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // invocacion_funciones ::= IDENTIFICADOR APERTURA_PARENTESIS parametros_invocacion CIERRE_PARENTESIS 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		List<Expresion> p = (List<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            Identificador identificador = new Identificador(id);
            RESULT = new InvocacionFuncion(identificador,p);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("invocacion_funciones",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // invocacion_funciones ::= IDENTIFICADOR APERTURA_PARENTESIS CIERRE_PARENTESIS 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
            Identificador identificador = new Identificador(id);
            RESULT = new InvocacionFuncion(identificador);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("invocacion_funciones",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // parametros_invocacion ::= parametros_invocacion COMA expresion 
            {
              List<Expresion> RESULT =null;
		int pileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int piright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		List<Expresion> pi = (List<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            pi.add(e);
            RESULT = pi;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametros_invocacion",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // parametros_invocacion ::= expresion 
            {
              List<Expresion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            List<Expresion> exp = new ArrayList();
            exp.add(e);
            RESULT= exp;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametros_invocacion",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // write ::= WRITE APERTURA_PARENTESIS expresion CIERRE_PARENTESIS 
            {
              Write RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT = new Write(e);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("write",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // write ::= WRITE APERTURA_PARENTESIS STRING_LITERAL CIERRE_PARENTESIS 
            {
              Write RESULT =null;
		
            Write w = new Write();
            w.setEsString(true);
            RESULT = w;
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("write",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // writeln ::= WRITELN APERTURA_PARENTESIS expresion CIERRE_PARENTESIS 
            {
              Write RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT = new Write(e, true);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("writeln",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // writeln ::= WRITELN APERTURA_PARENTESIS STRING_LITERAL CIERRE_PARENTESIS 
            {
              Write RESULT =null;
		
            Write w = new Write(true);
            w.setEsString(true);
            RESULT = w;
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("writeln",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // tipo ::= INTEGER 
            {
              Tipo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT= Tipo.INTEGER;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // tipo ::= FLOAT 
            {
              Tipo RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT= Tipo.FLOAT;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // tipo ::= BOOLEAN 
            {
              Tipo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT= Tipo.BOOL;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // when ::= WHEN expresion comparaciones_is ELSE instruccion 
            {
              When RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		List<WhenIs> ci = (List<WhenIs>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Sentencia i = (Sentencia)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            List<Sentencia> sentenciasWhenElse = new ArrayList<Sentencia>();
            sentenciasWhenElse.add(i);
            Bloque bloque = new Bloque(sentenciasWhenElse,"WhenElse",false);
            RESULT= new When("When/else",e,ci,bloque);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("when",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // when ::= WHEN expresion comparaciones_is 
            {
              When RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		List<WhenIs> ci = (List<WhenIs>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT= new When("When",e,ci);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("when",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // comparaciones_is ::= comparaciones_is comparacion_is 
            {
              List<WhenIs> RESULT =null;
		int ccleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		List<WhenIs> cc = (List<WhenIs>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		WhenIs c = (WhenIs)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            cc.add(c);
            RESULT= cc;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comparaciones_is",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // comparaciones_is ::= comparacion_is 
            {
              List<WhenIs> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		WhenIs c = (WhenIs)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            List<WhenIs> cs = new ArrayList<>();
            cs.add(c);
            RESULT= cs;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comparaciones_is",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // comparacion_is ::= IS comparador expresion THEN instruccion 
            {
              WhenIs RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Comparador c = (Comparador)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Sentencia i = (Sentencia)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            List<Sentencia> sentenciasWhenIs = new ArrayList<Sentencia>();
            sentenciasWhenIs.add(i);
            Bloque bloque = new Bloque(sentenciasWhenIs,"WhenIs",false);
            RESULT= new WhenIs(c,e,bloque);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comparacion_is",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // comparador ::= MENOR 
            {
              Comparador RESULT =null;
		
            RESULT= Comparador.MENOR;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comparador",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // comparador ::= MENOR_IGUAL 
            {
              Comparador RESULT =null;
		
            RESULT= Comparador.MENORIGUAL;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comparador",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // comparador ::= MAYOR 
            {
              Comparador RESULT =null;
		
            RESULT= Comparador.MAYOR;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comparador",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // comparador ::= MAYOR_IGUAL 
            {
              Comparador RESULT =null;
		
            RESULT= Comparador.MAYORIGUAL;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comparador",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // comparador ::= IGUAL_IGUAL 
            {
              Comparador RESULT =null;
		
            RESULT= Comparador.IGUALIGUAL;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comparador",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // comparador ::= DISTINTO 
            {
              Comparador RESULT =null;
		
            RESULT= Comparador.DISTINTO;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comparador",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // if ::= IF condicion THEN instruccion ELSE instruccion 
            {
              If RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Sentencia i1 = (Sentencia)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Sentencia i2 = (Sentencia)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            List<Sentencia> sentenciasIf = new ArrayList<Sentencia>();
            sentenciasIf.add(i1);
            Bloque bloqueThen = new Bloque(sentenciasIf,"BLOQUE_THEN",false);
            List<Sentencia> sentenciasElse = new ArrayList<Sentencia>();
            sentenciasElse.add(i2);
            Bloque bloqueElse = new Bloque(sentenciasElse,"BLOQUE_ELSE",false);
            RESULT= new If("IF/ELSE",c, bloqueThen, bloqueElse);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("if",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // if ::= IF condicion THEN instruccion 
            {
              If RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Sentencia i = (Sentencia)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            List<Sentencia> sentenciasIf = new ArrayList<Sentencia>();
            sentenciasIf.add(i);
            Bloque bloqueThen = new Bloque(sentenciasIf,"BLOQUE_THEN",false);
            RESULT= new If("IF",c, bloqueThen);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("if",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // condicion ::= expresion 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=e;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expresion ::= exp_or 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=e;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // exp_or ::= exp_or OR exp_and 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion ea = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT= new Or(e, ea);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp_or",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // exp_or ::= exp_and 
            {
              Expresion RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion ea = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=ea;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp_or",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // exp_and ::= exp_and AND exp_not 
            {
              Expresion RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion ea = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int enleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int enright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion en = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT= new And(ea,en);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp_and",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // exp_and ::= exp_not 
            {
              Expresion RESULT =null;
		int enleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int enright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion en = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=en;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp_and",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // exp_not ::= NOT exp_not 
            {
              Expresion RESULT =null;
		int enleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int enright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion en = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT= new Not(en);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp_not",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // exp_not ::= comparacion 
            {
              Expresion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT= c;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp_not",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // comparacion ::= exp_arit IGUAL_IGUAL exp_arit 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new IgualIgual(e1,e2);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comparacion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // comparacion ::= exp_arit DISTINTO exp_arit 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new Distinto(e1,e2);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comparacion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // comparacion ::= exp_arit MAYOR_IGUAL exp_arit 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new MayorIgual(e1,e2);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comparacion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // comparacion ::= exp_arit MENOR_IGUAL exp_arit 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new MenorIgual(e1,e2);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comparacion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // comparacion ::= exp_arit MENOR exp_arit 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new Menor(e1,e2);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comparacion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // comparacion ::= exp_arit MAYOR exp_arit 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new Mayor(e1,e2);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comparacion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // comparacion ::= exp_arit 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT= e;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comparacion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // exp_arit ::= exp_arit MAS termino 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion t = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new Suma(e, t);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp_arit",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // exp_arit ::= exp_arit MENOS termino 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion t = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new Resta(e, t);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp_arit",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // exp_arit ::= termino 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion t = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = t;
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp_arit",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // termino ::= termino MULTIPLICAR factor 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion t = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new Multiplicacion(t, f);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("termino",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // termino ::= termino DIVIDIR factor 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion t = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new Division(t, f);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("termino",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // termino ::= factor 
            {
              Expresion RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = f;
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("termino",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // factor ::= APERTURA_PARENTESIS exp_or CIERRE_PARENTESIS 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT = e;
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("factor",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // factor ::= IDENTIFICADOR 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new Identificador(id);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("factor",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // factor ::= INTEGER_LITERAL 
            {
              Expresion RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String ent = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new Constante(ent, Tipo.INTEGER);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("factor",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // factor ::= FLOAT_LITERAL 
            {
              Expresion RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new Constante(f, Tipo.FLOAT);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("factor",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // factor ::= TRUE 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new Constante(t, Tipo.BOOL);;
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("factor",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // factor ::= FALSE 
            {
              Expresion RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new Constante(f, Tipo.BOOL);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("factor",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // factor ::= invocacion_funciones 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion i = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = i;
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("factor",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // factor ::= READ_INTEGER APERTURA_PARENTESIS CIERRE_PARENTESIS 
            {
              Expresion RESULT =null;
		
            RESULT= new Read("READ_INTEGER",Tipo.INTEGER);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("factor",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // factor ::= READ_BOOLEAN APERTURA_PARENTESIS CIERRE_PARENTESIS 
            {
              Expresion RESULT =null;
		
            RESULT= new Read("READ_BOOLEAN",Tipo.BOOL);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("factor",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // factor ::= READ_FLOAT APERTURA_PARENTESIS CIERRE_PARENTESIS 
            {
              Expresion RESULT =null;
		
            RESULT= new Read("READ_FLOAT",Tipo.FLOAT);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("factor",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // factor ::= MENOS factor 
            {
              Expresion RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new MenosUnario(f);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("factor",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
