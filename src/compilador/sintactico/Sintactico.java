
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compilador.sintactico;

import compilador.ast.base.*;
import compilador.ast.instrucciones.*;
import compilador.ast.operaciones.binarias.*;
import compilador.ast.operaciones.unarias.*;
import java.util.*;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SintacticoSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\102\000\002\002\004\000\002\015\003\000\002\016" +
    "\007\000\002\017\004\000\002\017\003\000\002\020\004" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\004\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\022\005" +
    "\000\002\024\006\000\002\024\010\000\002\025\005\000" +
    "\002\031\006\000\002\032\014\000\002\032\012\000\002" +
    "\023\006\000\002\023\005\000\002\014\005\000\002\014" +
    "\003\000\002\027\006\000\002\027\006\000\002\030\006" +
    "\000\002\030\006\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\033\010\000\002\033\006\000\002" +
    "\002\003\000\002\004\003\000\002\006\005\000\002\006" +
    "\003\000\002\007\005\000\002\007\003\000\002\010\004" +
    "\000\002\010\003\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\005\000\002\003\005\000\002" +
    "\003\005\000\002\003\003\000\002\005\005\000\002\005" +
    "\005\000\002\005\003\000\002\011\005\000\002\011\005" +
    "\000\002\011\003\000\002\012\005\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\176\000\004\004\005\001\002\000\004\002\200\001" +
    "\002\000\004\027\007\001\002\000\004\002\000\001\002" +
    "\000\030\026\020\031\012\033\021\036\024\040\022\041" +
    "\014\043\031\044\010\046\015\050\036\054\032\001\002" +
    "\000\006\022\ufff4\035\ufff4\001\002\000\032\026\020\031" +
    "\012\033\021\036\024\037\176\040\022\041\014\043\031" +
    "\044\010\046\015\050\036\054\032\001\002\000\022\007" +
    "\054\012\055\025\057\054\071\055\073\056\074\057\062" +
    "\060\067\001\002\000\006\022\ufff1\035\ufff1\001\002\000" +
    "\004\012\166\001\002\000\022\007\054\012\055\025\057" +
    "\054\071\055\073\056\074\057\062\060\067\001\002\000" +
    "\004\022\164\001\002\000\006\022\ufff0\035\ufff0\001\002" +
    "\000\004\054\154\001\002\000\022\007\054\012\055\025" +
    "\057\054\071\055\073\056\074\057\062\060\067\001\002" +
    "\000\004\012\141\001\002\000\006\022\ufff7\035\ufff7\001" +
    "\002\000\030\026\020\031\012\033\021\036\024\040\022" +
    "\041\014\043\031\044\010\046\015\050\036\054\032\001" +
    "\002\000\032\026\ufffd\031\ufffd\033\ufffd\036\ufffd\037\ufffd" +
    "\040\ufffd\041\ufffd\043\ufffd\044\ufffd\046\ufffd\050\ufffd\054" +
    "\ufffd\001\002\000\006\022\ufff9\035\ufff9\001\002\000\006" +
    "\022\ufff8\035\ufff8\001\002\000\006\022\ufffb\035\ufffb\001" +
    "\002\000\006\022\ufff5\035\ufff5\001\002\000\006\012\053" +
    "\030\052\001\002\000\006\022\ufffa\035\ufffa\001\002\000" +
    "\006\022\ufff6\035\ufff6\001\002\000\006\022\ufff2\035\ufff2" +
    "\001\002\000\004\054\037\001\002\000\004\053\040\001" +
    "\002\000\004\055\041\001\002\000\004\052\042\001\002" +
    "\000\004\055\043\001\002\000\006\032\044\051\045\001" +
    "\002\000\030\026\020\031\012\033\021\036\024\040\022" +
    "\041\014\043\031\044\010\046\015\050\036\054\032\001" +
    "\002\000\004\055\046\001\002\000\004\032\047\001\002" +
    "\000\030\026\020\031\012\033\021\036\024\040\022\041" +
    "\014\043\031\044\010\046\015\050\036\054\032\001\002" +
    "\000\006\022\uffea\035\uffea\001\002\000\006\022\uffe9\035" +
    "\uffe9\001\002\000\022\007\054\012\055\025\057\054\071" +
    "\055\073\056\074\057\062\060\067\001\002\000\024\007" +
    "\054\012\055\013\072\025\057\054\071\055\073\056\074" +
    "\057\062\060\067\001\002\000\020\007\054\012\055\054" +
    "\071\055\073\056\074\057\062\060\067\001\002\000\022" +
    "\007\054\012\055\025\057\054\071\055\073\056\074\057" +
    "\062\060\067\001\002\000\006\013\uffe5\047\uffe5\001\002" +
    "\000\022\007\054\012\055\025\057\054\071\055\073\056" +
    "\074\057\062\060\067\001\002\000\006\013\127\047\126" +
    "\001\002\000\042\006\106\007\111\013\uffcd\014\114\015" +
    "\112\016\115\017\113\020\107\021\110\022\uffcd\023\uffcd" +
    "\024\uffcd\032\uffcd\034\uffcd\035\uffcd\047\uffcd\001\002\000" +
    "\046\006\uffc2\007\uffc2\010\uffc2\011\uffc2\013\uffc2\014\uffc2" +
    "\015\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023" +
    "\uffc2\024\uffc2\032\uffc2\034\uffc2\035\uffc2\047\uffc2\001\002" +
    "\000\022\013\uffd8\022\uffd8\023\uffd8\024\100\032\uffd8\034" +
    "\uffd8\035\uffd8\047\uffd8\001\002\000\046\006\uffc7\007\uffc7" +
    "\010\uffc7\011\uffc7\013\uffc7\014\uffc7\015\uffc7\016\uffc7\017" +
    "\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\032\uffc7" +
    "\034\uffc7\035\uffc7\047\uffc7\001\002\000\046\006\uffca\007" +
    "\uffca\010\103\011\102\013\uffca\014\uffca\015\uffca\016\uffca" +
    "\017\uffca\020\uffca\021\uffca\022\uffca\023\uffca\024\uffca\032" +
    "\uffca\034\uffca\035\uffca\047\uffca\001\002\000\022\013\uffd6" +
    "\022\uffd6\023\uffd6\024\uffd6\032\uffd6\034\uffd6\035\uffd6\047" +
    "\uffd6\001\002\000\046\006\uffc1\007\uffc1\010\uffc1\011\uffc1" +
    "\013\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1\021" +
    "\uffc1\022\uffc1\023\uffc1\024\uffc1\032\uffc1\034\uffc1\035\uffc1" +
    "\047\uffc1\001\002\000\022\013\uffd4\022\uffd4\023\uffd4\024" +
    "\uffd4\032\uffd4\034\uffd4\035\uffd4\047\uffd4\001\002\000\046" +
    "\006\uffc5\007\uffc5\010\uffc5\011\uffc5\013\uffc5\014\uffc5\015" +
    "\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5" +
    "\024\uffc5\032\uffc5\034\uffc5\035\uffc5\047\uffc5\001\002\000" +
    "\006\022\uffe7\035\uffe7\001\002\000\046\006\uffc4\007\uffc4" +
    "\010\uffc4\011\uffc4\013\uffc4\014\uffc4\015\uffc4\016\uffc4\017" +
    "\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4\032\uffc4" +
    "\034\uffc4\035\uffc4\047\uffc4\001\002\000\046\006\uffc3\007" +
    "\uffc3\010\uffc3\011\uffc3\013\uffc3\014\uffc3\015\uffc3\016\uffc3" +
    "\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\032" +
    "\uffc3\034\uffc3\035\uffc3\047\uffc3\001\002\000\020\013\uffda" +
    "\022\uffda\023\076\032\uffda\034\uffda\035\uffda\047\uffda\001" +
    "\002\000\022\007\054\012\055\025\057\054\071\055\073" +
    "\056\074\057\062\060\067\001\002\000\022\013\uffd9\022" +
    "\uffd9\023\uffd9\024\100\032\uffd9\034\uffd9\035\uffd9\047\uffd9" +
    "\001\002\000\022\007\054\012\055\025\057\054\071\055" +
    "\073\056\074\057\062\060\067\001\002\000\022\013\uffd7" +
    "\022\uffd7\023\uffd7\024\uffd7\032\uffd7\034\uffd7\035\uffd7\047" +
    "\uffd7\001\002\000\020\007\054\012\055\054\071\055\073" +
    "\056\074\057\062\060\067\001\002\000\020\007\054\012" +
    "\055\054\071\055\073\056\074\057\062\060\067\001\002" +
    "\000\046\006\uffc9\007\uffc9\010\uffc9\011\uffc9\013\uffc9\014" +
    "\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9" +
    "\023\uffc9\024\uffc9\032\uffc9\034\uffc9\035\uffc9\047\uffc9\001" +
    "\002\000\046\006\uffc8\007\uffc8\010\uffc8\011\uffc8\013\uffc8" +
    "\014\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022" +
    "\uffc8\023\uffc8\024\uffc8\032\uffc8\034\uffc8\035\uffc8\047\uffc8" +
    "\001\002\000\020\007\054\012\055\054\071\055\073\056" +
    "\074\057\062\060\067\001\002\000\020\007\054\012\055" +
    "\054\071\055\073\056\074\057\062\060\067\001\002\000" +
    "\020\007\054\012\055\054\071\055\073\056\074\057\062" +
    "\060\067\001\002\000\020\007\054\012\055\054\071\055" +
    "\073\056\074\057\062\060\067\001\002\000\020\007\054" +
    "\012\055\054\071\055\073\056\074\057\062\060\067\001" +
    "\002\000\020\007\054\012\055\054\071\055\073\056\074" +
    "\057\062\060\067\001\002\000\020\007\054\012\055\054" +
    "\071\055\073\056\074\057\062\060\067\001\002\000\020" +
    "\007\054\012\055\054\071\055\073\056\074\057\062\060" +
    "\067\001\002\000\026\006\106\007\111\013\uffd1\022\uffd1" +
    "\023\uffd1\024\uffd1\032\uffd1\034\uffd1\035\uffd1\047\uffd1\001" +
    "\002\000\026\006\106\007\111\013\uffce\022\uffce\023\uffce" +
    "\024\uffce\032\uffce\034\uffce\035\uffce\047\uffce\001\002\000" +
    "\026\006\106\007\111\013\uffd0\022\uffd0\023\uffd0\024\uffd0" +
    "\032\uffd0\034\uffd0\035\uffd0\047\uffd0\001\002\000\026\006" +
    "\106\007\111\013\uffcf\022\uffcf\023\uffcf\024\uffcf\032\uffcf" +
    "\034\uffcf\035\uffcf\047\uffcf\001\002\000\046\006\uffcb\007" +
    "\uffcb\010\103\011\102\013\uffcb\014\uffcb\015\uffcb\016\uffcb" +
    "\017\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\032" +
    "\uffcb\034\uffcb\035\uffcb\047\uffcb\001\002\000\026\006\106" +
    "\007\111\013\uffd2\022\uffd2\023\uffd2\024\uffd2\032\uffd2\034" +
    "\uffd2\035\uffd2\047\uffd2\001\002\000\026\006\106\007\111" +
    "\013\uffd3\022\uffd3\023\uffd3\024\uffd3\032\uffd3\034\uffd3\035" +
    "\uffd3\047\uffd3\001\002\000\046\006\uffcc\007\uffcc\010\103" +
    "\011\102\013\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc\020" +
    "\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc\032\uffcc\034\uffcc" +
    "\035\uffcc\047\uffcc\001\002\000\022\007\054\012\055\025" +
    "\057\054\071\055\073\056\074\057\062\060\067\001\002" +
    "\000\006\022\uffe8\035\uffe8\001\002\000\006\013\uffe6\047" +
    "\uffe6\001\002\000\022\013\uffd5\022\uffd5\023\uffd5\024\uffd5" +
    "\032\uffd5\034\uffd5\035\uffd5\047\uffd5\001\002\000\006\013" +
    "\133\023\076\001\002\000\046\006\uffc6\007\uffc6\010\uffc6" +
    "\011\uffc6\013\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6\020" +
    "\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6\032\uffc6\034\uffc6" +
    "\035\uffc6\047\uffc6\001\002\000\046\006\uffc0\007\uffc0\010" +
    "\uffc0\011\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0" +
    "\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\032\uffc0\034" +
    "\uffc0\035\uffc0\047\uffc0\001\002\000\006\022\uffec\035\uffec" +
    "\001\002\000\032\026\020\031\012\033\021\036\024\037" +
    "\137\040\022\041\014\043\031\044\010\046\015\050\036" +
    "\054\032\001\002\000\006\022\uffef\035\uffef\001\002\000" +
    "\032\026\ufffe\031\ufffe\033\ufffe\036\ufffe\037\ufffe\040\ufffe" +
    "\041\ufffe\043\ufffe\044\ufffe\046\ufffe\050\ufffe\054\ufffe\001" +
    "\002\000\024\007\054\012\055\025\057\054\071\055\073" +
    "\056\074\057\062\060\067\064\142\001\002\000\004\013" +
    "\145\001\002\000\004\013\144\001\002\000\006\022\uffe4" +
    "\035\uffe4\001\002\000\006\022\uffe3\035\uffe3\001\002\000" +
    "\006\032\uffdb\034\uffdb\001\002\000\004\034\150\001\002" +
    "\000\030\026\020\031\012\033\021\036\024\040\022\041" +
    "\014\043\031\044\010\046\015\050\036\054\032\001\002" +
    "\000\006\022\uffdc\035\152\001\002\000\030\026\020\031" +
    "\012\033\021\036\024\040\022\041\014\043\031\044\010" +
    "\046\015\050\036\054\032\001\002\000\006\022\uffdd\035" +
    "\uffdd\001\002\000\004\027\155\001\002\000\010\061\156" +
    "\062\160\063\161\001\002\000\010\022\uffe0\030\uffe0\035" +
    "\uffe0\001\002\000\010\022\uffee\030\162\035\uffee\001\002" +
    "\000\010\022\uffdf\030\uffdf\035\uffdf\001\002\000\010\022" +
    "\uffde\030\uffde\035\uffde\001\002\000\022\007\054\012\055" +
    "\025\057\054\071\055\073\056\074\057\062\060\067\001" +
    "\002\000\006\022\uffed\035\uffed\001\002\000\032\026\ufffc" +
    "\031\ufffc\033\ufffc\036\ufffc\037\ufffc\040\ufffc\041\ufffc\043" +
    "\ufffc\044\ufffc\046\ufffc\050\ufffc\054\ufffc\001\002\000\006" +
    "\022\ufff3\035\ufff3\001\002\000\024\007\054\012\055\025" +
    "\057\054\071\055\073\056\074\057\062\060\067\064\167" +
    "\001\002\000\004\013\172\001\002\000\004\013\171\001" +
    "\002\000\006\022\uffe2\035\uffe2\001\002\000\006\022\uffe1" +
    "\035\uffe1\001\002\000\004\032\174\001\002\000\030\026" +
    "\020\031\012\033\021\036\024\040\022\041\014\043\031" +
    "\044\010\046\015\050\036\054\032\001\002\000\006\022" +
    "\uffeb\035\uffeb\001\002\000\004\005\177\001\002\000\004" +
    "\002\uffff\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\176\000\006\015\003\016\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\017\010" +
    "\020\024\021\015\022\016\023\026\024\033\025\022\027" +
    "\034\030\012\031\027\032\032\033\025\001\001\000\002" +
    "\001\001\000\030\020\137\021\015\022\016\023\026\024" +
    "\033\025\022\027\034\030\012\031\027\032\032\033\025" +
    "\001\001\000\024\002\172\003\067\004\145\005\060\006" +
    "\074\007\062\010\065\011\064\012\063\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\003\067\004\164\005" +
    "\060\006\074\007\062\010\065\011\064\012\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\002\146\003\067\004\145\005\060\006\074\007\062" +
    "\010\065\011\064\012\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\017\135\020\024\021\015\022\016" +
    "\023\026\024\033\025\022\027\034\030\012\031\027\032" +
    "\032\033\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\021\050\022\016\023\026\024\033\025\022\027" +
    "\034\030\012\031\027\032\032\033\025\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\021\047\022\016\023" +
    "\026\024\033\025\022\027\034\030\012\031\027\032\032" +
    "\033\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\003\067\004\134\005\060\006\074\007\062\010\065" +
    "\011\064\012\063\001\001\000\024\003\067\004\055\005" +
    "\060\006\074\007\062\010\065\011\064\012\063\014\057" +
    "\001\001\000\004\012\133\001\001\000\020\003\067\005" +
    "\060\006\131\007\062\010\065\011\064\012\063\001\001" +
    "\000\002\001\001\000\014\003\067\005\060\010\130\011" +
    "\064\012\063\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\003\067" +
    "\005\060\007\076\010\065\011\064\012\063\001\001\000" +
    "\002\001\001\000\014\003\067\005\060\010\100\011\064" +
    "\012\063\001\001\000\002\001\001\000\004\012\104\001" +
    "\001\000\004\012\103\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\124\012\063\001\001\000\010\005" +
    "\123\011\064\012\063\001\001\000\010\005\122\011\064" +
    "\012\063\001\001\000\006\011\121\012\063\001\001\000" +
    "\010\005\120\011\064\012\063\001\001\000\010\005\117" +
    "\011\064\012\063\001\001\000\010\005\116\011\064\012" +
    "\063\001\001\000\010\005\115\011\064\012\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\003\067\004\127\005" +
    "\060\006\074\007\062\010\065\011\064\012\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\020\137\021\015\022\016\023\026\024" +
    "\033\025\022\027\034\030\012\031\027\032\032\033\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\003" +
    "\067\004\142\005\060\006\074\007\062\010\065\011\064" +
    "\012\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\021\150\022\016\023\026\024\033\025" +
    "\022\027\034\030\012\031\027\032\032\033\025\001\001" +
    "\000\002\001\001\000\026\021\152\022\016\023\026\024" +
    "\033\025\022\027\034\030\012\031\027\032\032\033\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\026" +
    "\156\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\003\067\004\162\005" +
    "\060\006\074\007\062\010\065\011\064\012\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\003\067\004\167\005\060\006\074\007\062\010\065" +
    "\011\064\012\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\021\174\022\016\023\026\024\033\025\022\027" +
    "\034\030\012\031\027\032\032\033\025\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /*
    public void syntax_error(Symbol s) {
        System.out.println("Error en la línea " + (s.right+1) + ", columna " + s.left + ": "
            + SintacticoSym.terminalNames[s.sym] + "(" + s.value + ") no reconocido.");
    }   */

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
            System.out.println("Error en la linea "+ (s.left+1)+ " Columna "+ s.right+ ". Valor simbolo '"
            +s.value+"' . Simbolo n° "+s.sym+ " no reconocido." );
        }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {




  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Programa start_val = (Programa)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= bloque_main 
            {
              Programa RESULT =null;
		int bmleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bmright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Bloque bm = (Bloque)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new Programa(bm);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("programa",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // bloque_main ::= MAIN IS sentencias END PUNTO 
            {
              Bloque RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		List<Sentencia> ss = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
            RESULT = new Bloque(ss,"MAIN",true);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bloque_main",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sentencias ::= sentencias sentencia 
            {
              List<Sentencia> RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		List<Sentencia> ss = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Sentencia s = (Sentencia)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            ss.add(s);
            RESULT= ss;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencias",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sentencias ::= sentencia 
            {
              List<Sentencia> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Sentencia s = (Sentencia)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            List<Sentencia> ls = new ArrayList<>();
            ls.add(s);
            RESULT= ls;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencias",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sentencia ::= instruccion PUNTO_COMA 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Sentencia i = (Sentencia)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT=i;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= while 
            {
              Sentencia RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		While w = (While)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=w;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= for 
            {
              Sentencia RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		For f = (For)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=f;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= if 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		If i = (If)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=i;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= invocacion_funciones 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Sentencia i = (Sentencia)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=i;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= asignacion 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Asignacion a = (Asignacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=a;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= declaracion_variable 
            {
              Sentencia RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		DeclaracionVariable d = (DeclaracionVariable)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=d;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= BREAK 
            {
              Sentencia RESULT =null;
		
            RESULT= new Break("BREAK");
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= CONTINUE 
            {
              Sentencia RESULT =null;
		
            RESULT= new Continue("CONTINUE");
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion ::= RETURN expresion 
            {
              Sentencia RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT= new Return(e);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccion ::= write 
            {
              Sentencia RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Write w = (Write)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=w;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion ::= writeln 
            {
              Sentencia RESULT =null;
		int wlnleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int wlnright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Write wln = (Write)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=wln;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruccion ::= bloque 
            {
              Sentencia RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=b;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // bloque ::= BEGIN sentencias END 
            {
              Sentencia RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		List<Sentencia> ss = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT = new Bloque (ss,"BLOQUE",false);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bloque",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaracion_variable ::= VARIABLE IDENTIFICADOR IS tipo 
            {
              DeclaracionVariable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            Identificador identificador = new Identificador(id,t);
            RESULT= new DeclaracionVariable(identificador,t);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion_variable",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declaracion_variable ::= VARIABLE IDENTIFICADOR IS tipo IGUAL expresion 
            {
              DeclaracionVariable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            Identificador identificador = new Identificador(id,t);
            RESULT= new DeclaracionVariable(identificador,t,e);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion_variable",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // asignacion ::= IDENTIFICADOR IGUAL expresion 
            {
              Asignacion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                   Identificador ident = new Identificador(id);
                   RESULT = new Asignacion(ident,e);
              
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacion",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // while ::= WHILE condicion DO instruccion 
            {
              While RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Sentencia i = (Sentencia)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            List<Sentencia> aux = new ArrayList<Sentencia>();
            aux.add(i);
            Bloque bloque = new Bloque(aux,"BLOQUE_WHILE",false);
            RESULT= new While("WHILE",c, bloque);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("while",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // for ::= FOR IDENTIFICADOR FROM INTEGER_LITERAL TO INTEGER_LITERAL BY INTEGER_LITERAL DO instruccion 
            {
              For RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Sentencia i = (Sentencia)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		

            Identificador identificador = new Identificador(id);
            Constante from = new Constante(f, Tipo.INTEGER);
            Constante to = new Constante(t, Tipo.INTEGER);
            Constante by = new Constante(b, Tipo.INTEGER);
            List<Sentencia> aux = new ArrayList<Sentencia>();
            aux.add(i);
            Bloque bloque = new Bloque(aux,"FOR",false);
            RESULT= new For(identificador,from,to,by,bloque);

            /* FOR -> WHILE esta bien aca, no me grafica BLOQUE en el while interno
            List<Sentencia> cuerpoFor = new ArrayList<Sentencia>(); //lista de sentencias del bloque principal
            Expresion from = new Constante(f, Tipo.INTEGER);    //constante from
            Identificador identificador = new Identificador(id);    //identificador
            Sentencia as = new Asignacion(identificador,from);  //primera asignacion id=f;
            cuerpoFor.add(as);  //agrego esa sentencia al bloque principal

            List<Sentencia> aux = new ArrayList<Sentencia>();   //lista de sentencias del bloque while interno
            aux.add(i); //agrego todas las sentencias que eran del for original
            Expresion by = new Constante(b, Tipo.INTEGER);  //constante by
            Expresion exp = new Suma(identificador,by); //expresion usada en la asignacion id+by;
            Sentencia asig = new Asignacion(identificador,exp); // asignacion id=id+by;
            aux.add(asig);  //agrego la asignacion a la lista de sentencias del bloque while interno

            Expresion to = new Constante(t,Tipo.INTEGER);   //constante to
            Expresion condicion = new MenorIgual(identificador,to); //condicion del while interno

            Bloque bloque = new Bloque(aux,"BLOQUE",false);  //bloque de sentencias del while interno

            While w = new While("WHILE",condicion,bloque);  // while interno completo
            cuerpoFor.add(w);   //agrego el while completo a la lista de sentencias del cuerpo de mi for original
            RESULT = new Bloque (cuerpoFor,"FOR->WHILE",false);
            */

        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("for",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // for ::= FOR IDENTIFICADOR FROM INTEGER_LITERAL TO INTEGER_LITERAL DO instruccion 
            {
              For RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Sentencia i = (Sentencia)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		

            Identificador identificador = new Identificador(id);
            Constante from = new Constante(f, Tipo.INTEGER);
            Constante to = new Constante(t, Tipo.INTEGER);
            Constante by = new Constante(String.valueOf(1), Tipo.INTEGER);
            List<Sentencia> aux = new ArrayList<Sentencia>();
            aux.add(i);
            Bloque bloque = new Bloque(aux,"FOR",false);
            RESULT= new For(identificador,from,to,by,bloque);

            /* FOR -> WHILE esta bien aca, no me grafica BLOQUE en el while interno
            List<Sentencia> cuerpoFor = new ArrayList<Sentencia>(); //lista de sentencias del bloque principal
            Expresion from = new Constante(f, Tipo.INTEGER);    //constante from
            Identificador identificador = new Identificador(id);    //identificador
            Sentencia as = new Asignacion(identificador,from);  //primera asignacion id=f;
            cuerpoFor.add(as);  //agrego esa sentencia al bloque principal

            List<Sentencia> aux = new ArrayList<Sentencia>();   //lista de sentencias del bloque while interno
            aux.add(i); //agrego todas las sentencias que eran del for original
            Expresion by = new Constante(String.valueOf(1), Tipo.INTEGER);  //constante by
            Expresion exp = new Suma(identificador,by); //expresion usada en la asignacion id+by;
            Sentencia asig = new Asignacion(identificador,exp); // asignacion id=id+by;
            aux.add(asig);  //agrego la asignacion a la lista de sentencias del bloque while interno

            Expresion to = new Constante(t,Tipo.INTEGER);   //constante to
            Expresion condicion = new MenorIgual(identificador,to); //condicion del while interno

            Bloque bloque = new Bloque(aux,"BLOQUE",false);  //bloque de sentencias del while interno

            While w = new While("WHILE",condicion,bloque);  // while interno completo
            cuerpoFor.add(w);   //agrego el while completo a la lista de sentencias del cuerpo de mi for original
            RESULT = new Bloque (cuerpoFor,"FOR->WHILE",false);
            */
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("for",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // invocacion_funciones ::= IDENTIFICADOR APERTURA_PARENTESIS parametros_invocacion CIERRE_PARENTESIS 
            {
              Sentencia RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		List<Expresion> p = (List<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            Identificador identificador = new Identificador(id);
            RESULT = new InvocacionFuncion(identificador,p);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("invocacion_funciones",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // invocacion_funciones ::= IDENTIFICADOR APERTURA_PARENTESIS CIERRE_PARENTESIS 
            {
              Sentencia RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
            Identificador identificador = new Identificador(id);
            RESULT = new InvocacionFuncion(identificador);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("invocacion_funciones",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // parametros_invocacion ::= parametros_invocacion COMA expresion 
            {
              List<Expresion> RESULT =null;
		int pileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int piright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		List<Expresion> pi = (List<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            pi.add(e);
            RESULT = pi;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametros_invocacion",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // parametros_invocacion ::= expresion 
            {
              List<Expresion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            List<Expresion> exp = new ArrayList();
            exp.add(e);
            RESULT= exp;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametros_invocacion",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // write ::= WRITE APERTURA_PARENTESIS expresion CIERRE_PARENTESIS 
            {
              Write RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT = new Write(e);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("write",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // write ::= WRITE APERTURA_PARENTESIS STRING_LITERAL CIERRE_PARENTESIS 
            {
              Write RESULT =null;
		
            Write w = new Write();
            w.setEsString(true);
            RESULT = w;
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("write",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // writeln ::= WRITELN APERTURA_PARENTESIS expresion CIERRE_PARENTESIS 
            {
              Write RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT = new Write(e, true);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("writeln",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // writeln ::= WRITELN APERTURA_PARENTESIS STRING_LITERAL CIERRE_PARENTESIS 
            {
              Write RESULT =null;
		
            Write w = new Write(true);
            w.setEsString(true);
            RESULT = w;
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("writeln",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // tipo ::= INTEGER 
            {
              Tipo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT= Tipo.INTEGER;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // tipo ::= FLOAT 
            {
              Tipo RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT= Tipo.FLOAT;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // tipo ::= BOOLEAN 
            {
              Tipo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT= Tipo.BOOL;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // if ::= IF condicion THEN instruccion ELSE instruccion 
            {
              If RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Sentencia i1 = (Sentencia)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Sentencia i2 = (Sentencia)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            List<Sentencia> sentenciasIf = new ArrayList<Sentencia>();
            sentenciasIf.add(i1);
            Bloque bloqueThen = new Bloque(sentenciasIf,"BLOQUE_THEN",false);
            List<Sentencia> sentenciasElse = new ArrayList<Sentencia>();
            sentenciasElse.add(i2);
            Bloque bloqueElse = new Bloque(sentenciasElse,"BLOQUE_ELSE",false);
            RESULT= new If("IF/ELSE",c, bloqueThen, bloqueElse);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("if",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // if ::= IF condicion THEN instruccion 
            {
              If RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Sentencia i = (Sentencia)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            List<Sentencia> sentenciasIf = new ArrayList<Sentencia>();
            sentenciasIf.add(i);
            Bloque bloqueThen = new Bloque(sentenciasIf,"BLOQUE_THEN",false);
            RESULT= new If("IF",c, bloqueThen);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("if",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // condicion ::= expresion 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=e;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresion ::= exp_or 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=e;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp_or ::= exp_or OR exp_and 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion ea = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT= new Or(e, ea);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp_or",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp_or ::= exp_and 
            {
              Expresion RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion ea = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=ea;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp_or",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp_and ::= exp_and AND exp_not 
            {
              Expresion RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion ea = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int enleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int enright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion en = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT= new And(ea,en);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp_and",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp_and ::= exp_not 
            {
              Expresion RESULT =null;
		int enleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int enright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion en = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=en;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp_and",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp_not ::= NOT exp_not 
            {
              Expresion RESULT =null;
		int enleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int enright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion en = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT= new Not(en);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp_not",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp_not ::= comparacion 
            {
              Expresion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT= c;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp_not",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // comparacion ::= exp_arit IGUAL_IGUAL exp_arit 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new IgualIgual(e1,e2);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comparacion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // comparacion ::= exp_arit DISTINTO exp_arit 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new Distinto(e1,e2);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comparacion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // comparacion ::= exp_arit MAYOR_IGUAL exp_arit 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new MayorIgual(e1,e2);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comparacion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // comparacion ::= exp_arit MENOR_IGUAL exp_arit 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new MenorIgual(e1,e2);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comparacion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // comparacion ::= exp_arit MENOR exp_arit 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new Menor(e1,e2);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comparacion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // comparacion ::= exp_arit MAYOR exp_arit 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new Mayor(e1,e2);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comparacion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // comparacion ::= exp_arit 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT= e;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comparacion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp_arit ::= exp_arit MAS termino 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion t = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new Suma(e, t);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp_arit",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp_arit ::= exp_arit MENOS termino 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion t = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new Resta(e, t);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp_arit",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp_arit ::= termino 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion t = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = t;
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp_arit",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // termino ::= termino MULTIPLICAR factor 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion t = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new Multiplicacion(t, f);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("termino",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // termino ::= termino DIVIDIR factor 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion t = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new Division(t, f);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("termino",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // termino ::= factor 
            {
              Expresion RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = f;
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("termino",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // factor ::= APERTURA_PARENTESIS exp_or CIERRE_PARENTESIS 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT = e;
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("factor",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // factor ::= IDENTIFICADOR 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new Identificador(id);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("factor",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // factor ::= INTEGER_LITERAL 
            {
              Expresion RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String ent = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new Constante(ent, Tipo.INTEGER);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("factor",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // factor ::= FLOAT_LITERAL 
            {
              Expresion RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new Constante(f, Tipo.FLOAT);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("factor",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // factor ::= TRUE 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new Constante(t, Tipo.BOOL);;
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("factor",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // factor ::= FALSE 
            {
              Expresion RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new Constante(f, Tipo.BOOL);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("factor",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // factor ::= MENOS factor 
            {
              Expresion RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new MenosUnario(f);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("factor",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
