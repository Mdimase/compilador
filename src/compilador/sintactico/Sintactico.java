
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compilador.sintactico;

import compilador.ast.base.*;
import compilador.ast.instrucciones.*;
import compilador.ast.operaciones.binarias.*;
import compilador.ast.operaciones.unarias.*;
import java.util.*;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SintacticoSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\125\000\002\002\004\000\002\015\004\000\002\015" +
    "\003\000\002\016\007\000\002\020\005\000\002\020\004" +
    "\000\002\020\004\000\002\020\003\000\002\025\012\000" +
    "\002\025\011\000\002\026\005\000\002\026\004\000\002" +
    "\026\003\000\002\027\005\000\002\027\002\000\002\030" +
    "\005\000\002\031\007\000\002\041\003\000\002\041\003" +
    "\000\002\041\003\000\002\041\003\000\002\017\004\000" +
    "\002\017\003\000\002\021\004\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\004\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\023\005\000\002\024\006\000\002" +
    "\024\010\000\002\032\005\000\002\036\006\000\002\037" +
    "\014\000\002\037\012\000\002\002\006\000\002\002\005" +
    "\000\002\014\005\000\002\014\003\000\002\034\006\000" +
    "\002\034\006\000\002\035\006\000\002\035\006\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\040" +
    "\010\000\002\040\006\000\002\003\003\000\002\005\003" +
    "\000\002\007\005\000\002\007\003\000\002\010\005\000" +
    "\002\010\003\000\002\011\004\000\002\011\003\000\002" +
    "\004\005\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\004\005\000\002\004\005\000\002\004\003" +
    "\000\002\006\005\000\002\006\005\000\002\006\003\000" +
    "\002\012\005\000\002\012\005\000\002\012\003\000\002" +
    "\013\005\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\247\000\010\004\010\026\013\045\012\001\002\000" +
    "\010\004\010\026\013\045\012\001\002\000\010\004\ufffa" +
    "\026\ufffa\045\ufffa\001\002\000\004\022\245\001\002\000" +
    "\004\002\244\001\002\000\004\027\240\001\002\000\004" +
    "\002\uffff\001\002\000\004\054\107\001\002\000\004\054" +
    "\014\001\002\000\004\027\015\001\002\000\010\061\016" +
    "\062\021\063\020\001\002\000\042\013\uffce\022\uffce\026" +
    "\uffce\030\uffce\031\uffce\033\uffce\035\uffce\036\uffce\040\uffce" +
    "\041\uffce\043\uffce\044\uffce\046\uffce\047\uffce\050\uffce\054" +
    "\uffce\001\002\000\010\022\uffdc\030\022\035\uffdc\001\002" +
    "\000\042\013\uffcc\022\uffcc\026\uffcc\030\uffcc\031\uffcc\033" +
    "\uffcc\035\uffcc\036\uffcc\040\uffcc\041\uffcc\043\uffcc\044\uffcc" +
    "\046\uffcc\047\uffcc\050\uffcc\054\uffcc\001\002\000\042\013" +
    "\uffcd\022\uffcd\026\uffcd\030\uffcd\031\uffcd\033\uffcd\035\uffcd" +
    "\036\uffcd\040\uffcd\041\uffcd\043\uffcd\044\uffcd\046\uffcd\047" +
    "\uffcd\050\uffcd\054\uffcd\001\002\000\022\007\024\012\033" +
    "\025\041\054\042\055\043\056\040\057\026\060\035\001" +
    "\002\000\042\006\067\007\071\013\uffbb\014\074\015\073" +
    "\016\076\017\075\020\070\021\072\022\uffbb\023\uffbb\024" +
    "\uffbb\032\uffbb\034\uffbb\035\uffbb\047\uffbb\001\002\000\020" +
    "\007\024\012\033\054\042\055\043\056\040\057\026\060" +
    "\035\001\002\000\046\006\uffae\007\uffae\010\uffae\011\uffae" +
    "\013\uffae\014\uffae\015\uffae\016\uffae\017\uffae\020\uffae\021" +
    "\uffae\022\uffae\023\uffae\024\uffae\032\uffae\034\uffae\035\uffae" +
    "\047\uffae\001\002\000\046\006\uffb0\007\uffb0\010\uffb0\011" +
    "\uffb0\013\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0\020\uffb0" +
    "\021\uffb0\022\uffb0\023\uffb0\024\uffb0\032\uffb0\034\uffb0\035" +
    "\uffb0\047\uffb0\001\002\000\046\006\uffb8\007\uffb8\010\063" +
    "\011\062\013\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8\020" +
    "\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\032\uffb8\034\uffb8" +
    "\035\uffb8\047\uffb8\001\002\000\022\013\uffc4\022\uffc4\023" +
    "\uffc4\024\uffc4\032\uffc4\034\uffc4\035\uffc4\047\uffc4\001\002" +
    "\000\022\013\uffc2\022\uffc2\023\uffc2\024\uffc2\032\uffc2\034" +
    "\uffc2\035\uffc2\047\uffc2\001\002\000\020\013\uffc8\022\uffc8" +
    "\023\060\032\uffc8\034\uffc8\035\uffc8\047\uffc8\001\002\000" +
    "\022\007\024\012\033\025\041\054\042\055\043\056\040" +
    "\057\026\060\035\001\002\000\006\022\uffdb\035\uffdb\001" +
    "\002\000\046\006\uffaf\007\uffaf\010\uffaf\011\uffaf\013\uffaf" +
    "\014\uffaf\015\uffaf\016\uffaf\017\uffaf\020\uffaf\021\uffaf\022" +
    "\uffaf\023\uffaf\024\uffaf\032\uffaf\034\uffaf\035\uffaf\047\uffaf" +
    "\001\002\000\022\013\uffc6\022\uffc6\023\uffc6\024\054\032" +
    "\uffc6\034\uffc6\035\uffc6\047\uffc6\001\002\000\046\006\uffb5" +
    "\007\uffb5\010\uffb5\011\uffb5\013\uffb5\014\uffb5\015\uffb5\016" +
    "\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5" +
    "\032\uffb5\034\uffb5\035\uffb5\047\uffb5\001\002\000\046\006" +
    "\uffb1\007\uffb1\010\uffb1\011\uffb1\013\uffb1\014\uffb1\015\uffb1" +
    "\016\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1\024" +
    "\uffb1\032\uffb1\034\uffb1\035\uffb1\047\uffb1\001\002\000\022" +
    "\007\024\012\033\025\041\054\042\055\043\056\040\057" +
    "\026\060\035\001\002\000\050\006\uffb3\007\uffb3\010\uffb3" +
    "\011\uffb3\012\044\013\uffb3\014\uffb3\015\uffb3\016\uffb3\017" +
    "\uffb3\020\uffb3\021\uffb3\022\uffb3\023\uffb3\024\uffb3\032\uffb3" +
    "\034\uffb3\035\uffb3\047\uffb3\001\002\000\046\006\uffb2\007" +
    "\uffb2\010\uffb2\011\uffb2\013\uffb2\014\uffb2\015\uffb2\016\uffb2" +
    "\017\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2\032" +
    "\uffb2\034\uffb2\035\uffb2\047\uffb2\001\002\000\024\007\024" +
    "\012\033\013\047\025\041\054\042\055\043\056\040\057" +
    "\026\060\035\001\002\000\006\013\uffd3\047\uffd3\001\002" +
    "\000\006\013\051\047\050\001\002\000\046\006\uffd5\007" +
    "\uffd5\010\uffd5\011\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5" +
    "\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\032" +
    "\uffd5\034\uffd5\035\uffd5\047\uffd5\001\002\000\022\007\024" +
    "\012\033\025\041\054\042\055\043\056\040\057\026\060" +
    "\035\001\002\000\046\006\uffd6\007\uffd6\010\uffd6\011\uffd6" +
    "\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021" +
    "\uffd6\022\uffd6\023\uffd6\024\uffd6\032\uffd6\034\uffd6\035\uffd6" +
    "\047\uffd6\001\002\000\006\013\uffd4\047\uffd4\001\002\000" +
    "\022\013\uffc3\022\uffc3\023\uffc3\024\uffc3\032\uffc3\034\uffc3" +
    "\035\uffc3\047\uffc3\001\002\000\022\007\024\012\033\025" +
    "\041\054\042\055\043\056\040\057\026\060\035\001\002" +
    "\000\022\013\uffc5\022\uffc5\023\uffc5\024\uffc5\032\uffc5\034" +
    "\uffc5\035\uffc5\047\uffc5\001\002\000\006\013\057\023\060" +
    "\001\002\000\046\006\uffb4\007\uffb4\010\uffb4\011\uffb4\013" +
    "\uffb4\014\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4" +
    "\022\uffb4\023\uffb4\024\uffb4\032\uffb4\034\uffb4\035\uffb4\047" +
    "\uffb4\001\002\000\022\007\024\012\033\025\041\054\042" +
    "\055\043\056\040\057\026\060\035\001\002\000\022\013" +
    "\uffc7\022\uffc7\023\uffc7\024\054\032\uffc7\034\uffc7\035\uffc7" +
    "\047\uffc7\001\002\000\020\007\024\012\033\054\042\055" +
    "\043\056\040\057\026\060\035\001\002\000\020\007\024" +
    "\012\033\054\042\055\043\056\040\057\026\060\035\001" +
    "\002\000\046\006\uffb7\007\uffb7\010\uffb7\011\uffb7\013\uffb7" +
    "\014\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\022" +
    "\uffb7\023\uffb7\024\uffb7\032\uffb7\034\uffb7\035\uffb7\047\uffb7" +
    "\001\002\000\046\006\uffb6\007\uffb6\010\uffb6\011\uffb6\013" +
    "\uffb6\014\uffb6\015\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6" +
    "\022\uffb6\023\uffb6\024\uffb6\032\uffb6\034\uffb6\035\uffb6\047" +
    "\uffb6\001\002\000\046\006\uffad\007\uffad\010\uffad\011\uffad" +
    "\013\uffad\014\uffad\015\uffad\016\uffad\017\uffad\020\uffad\021" +
    "\uffad\022\uffad\023\uffad\024\uffad\032\uffad\034\uffad\035\uffad" +
    "\047\uffad\001\002\000\020\007\024\012\033\054\042\055" +
    "\043\056\040\057\026\060\035\001\002\000\020\007\024" +
    "\012\033\054\042\055\043\056\040\057\026\060\035\001" +
    "\002\000\020\007\024\012\033\054\042\055\043\056\040" +
    "\057\026\060\035\001\002\000\020\007\024\012\033\054" +
    "\042\055\043\056\040\057\026\060\035\001\002\000\020" +
    "\007\024\012\033\054\042\055\043\056\040\057\026\060" +
    "\035\001\002\000\020\007\024\012\033\054\042\055\043" +
    "\056\040\057\026\060\035\001\002\000\020\007\024\012" +
    "\033\054\042\055\043\056\040\057\026\060\035\001\002" +
    "\000\020\007\024\012\033\054\042\055\043\056\040\057" +
    "\026\060\035\001\002\000\026\006\067\007\071\013\uffbf" +
    "\022\uffbf\023\uffbf\024\uffbf\032\uffbf\034\uffbf\035\uffbf\047" +
    "\uffbf\001\002\000\026\006\067\007\071\013\uffbe\022\uffbe" +
    "\023\uffbe\024\uffbe\032\uffbe\034\uffbe\035\uffbe\047\uffbe\001" +
    "\002\000\026\006\067\007\071\013\uffbc\022\uffbc\023\uffbc" +
    "\024\uffbc\032\uffbc\034\uffbc\035\uffbc\047\uffbc\001\002\000" +
    "\026\006\067\007\071\013\uffbd\022\uffbd\023\uffbd\024\uffbd" +
    "\032\uffbd\034\uffbd\035\uffbd\047\uffbd\001\002\000\026\006" +
    "\067\007\071\013\uffc0\022\uffc0\023\uffc0\024\uffc0\032\uffc0" +
    "\034\uffc0\035\uffc0\047\uffc0\001\002\000\046\006\uffb9\007" +
    "\uffb9\010\063\011\062\013\uffb9\014\uffb9\015\uffb9\016\uffb9" +
    "\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9\032" +
    "\uffb9\034\uffb9\035\uffb9\047\uffb9\001\002\000\026\006\067" +
    "\007\071\013\uffc1\022\uffc1\023\uffc1\024\uffc1\032\uffc1\034" +
    "\uffc1\035\uffc1\047\uffc1\001\002\000\046\006\uffba\007\uffba" +
    "\010\063\011\062\013\uffba\014\uffba\015\uffba\016\uffba\017" +
    "\uffba\020\uffba\021\uffba\022\uffba\023\uffba\024\uffba\032\uffba" +
    "\034\uffba\035\uffba\047\uffba\001\002\000\004\012\110\001" +
    "\002\000\006\013\113\054\112\001\002\000\004\013\234" +
    "\001\002\000\004\027\232\001\002\000\004\046\135\001" +
    "\002\000\006\013\ufff5\047\133\001\002\000\006\013\ufff3" +
    "\047\116\001\002\000\004\054\120\001\002\000\004\013" +
    "\ufff6\001\002\000\004\027\123\001\002\000\006\013\ufff3" +
    "\047\116\001\002\000\004\013\ufff4\001\002\000\010\061" +
    "\016\062\021\063\020\001\002\000\004\030\125\001\002" +
    "\000\012\055\126\056\130\057\127\060\131\001\002\000" +
    "\006\013\ufff0\047\ufff0\001\002\000\006\013\uffee\047\uffee" +
    "\001\002\000\006\013\uffef\047\uffef\001\002\000\006\013" +
    "\uffed\047\uffed\001\002\000\006\013\ufff1\047\ufff1\001\002" +
    "\000\004\054\112\001\002\000\004\013\ufff7\001\002\000" +
    "\010\061\016\062\021\063\020\001\002\000\030\026\013" +
    "\031\141\033\146\036\151\040\147\041\142\043\156\044" +
    "\137\046\143\050\163\054\157\001\002\000\006\022\uffe2" +
    "\035\uffe2\001\002\000\006\022\uffdf\035\uffdf\001\002\000" +
    "\022\007\024\012\033\025\041\054\042\055\043\056\040" +
    "\057\026\060\035\001\002\000\004\012\222\001\002\000" +
    "\022\007\024\012\033\025\041\054\042\055\043\056\040" +
    "\057\026\060\035\001\002\000\004\022\220\001\002\000" +
    "\006\022\uffde\035\uffde\001\002\000\022\007\024\012\033" +
    "\025\041\054\042\055\043\056\040\057\026\060\035\001" +
    "\002\000\004\012\205\001\002\000\006\022\uffe5\035\uffe5" +
    "\001\002\000\030\026\013\031\141\033\146\036\151\040" +
    "\147\041\142\043\156\044\137\046\143\050\163\054\157" +
    "\001\002\000\010\004\ufff8\026\ufff8\045\ufff8\001\002\000" +
    "\006\022\uffe7\035\uffe7\001\002\000\006\022\uffe6\035\uffe6" +
    "\001\002\000\006\022\uffe9\035\uffe9\001\002\000\006\022" +
    "\uffe3\035\uffe3\001\002\000\006\012\044\030\177\001\002" +
    "\000\006\022\uffe8\035\uffe8\001\002\000\006\022\uffe4\035" +
    "\uffe4\001\002\000\006\022\uffe0\035\uffe0\001\002\000\004" +
    "\054\164\001\002\000\004\053\165\001\002\000\004\055" +
    "\166\001\002\000\004\052\167\001\002\000\004\055\170" +
    "\001\002\000\006\032\171\051\172\001\002\000\030\026" +
    "\013\031\141\033\146\036\151\040\147\041\142\043\156" +
    "\044\137\046\143\050\163\054\157\001\002\000\004\055" +
    "\173\001\002\000\004\032\174\001\002\000\030\026\013" +
    "\031\141\033\146\036\151\040\147\041\142\043\156\044" +
    "\137\046\143\050\163\054\157\001\002\000\006\022\uffd8" +
    "\035\uffd8\001\002\000\006\022\uffd7\035\uffd7\001\002\000" +
    "\022\007\024\012\033\025\041\054\042\055\043\056\040" +
    "\057\026\060\035\001\002\000\006\022\uffda\035\uffda\001" +
    "\002\000\032\026\013\031\141\033\146\036\151\037\203" +
    "\040\147\041\142\043\156\044\137\046\143\050\163\054" +
    "\157\001\002\000\032\026\uffeb\031\uffeb\033\uffeb\036\uffeb" +
    "\037\uffeb\040\uffeb\041\uffeb\043\uffeb\044\uffeb\046\uffeb\050" +
    "\uffeb\054\uffeb\001\002\000\006\022\uffdd\035\uffdd\001\002" +
    "\000\032\026\uffec\031\uffec\033\uffec\036\uffec\037\uffec\040" +
    "\uffec\041\uffec\043\uffec\044\uffec\046\uffec\050\uffec\054\uffec" +
    "\001\002\000\024\007\024\012\033\025\041\054\042\055" +
    "\043\056\040\057\026\060\035\064\207\001\002\000\004" +
    "\013\211\001\002\000\004\013\210\001\002\000\006\022" +
    "\uffd1\035\uffd1\001\002\000\006\022\uffd2\035\uffd2\001\002" +
    "\000\004\034\214\001\002\000\006\032\uffc9\034\uffc9\001" +
    "\002\000\030\026\013\031\141\033\146\036\151\040\147" +
    "\041\142\043\156\044\137\046\143\050\163\054\157\001" +
    "\002\000\006\022\uffca\035\216\001\002\000\030\026\013" +
    "\031\141\033\146\036\151\040\147\041\142\043\156\044" +
    "\137\046\143\050\163\054\157\001\002\000\006\022\uffcb" +
    "\035\uffcb\001\002\000\036\004\uffea\026\uffea\031\uffea\033" +
    "\uffea\036\uffea\037\uffea\040\uffea\041\uffea\043\uffea\044\uffea" +
    "\045\uffea\046\uffea\050\uffea\054\uffea\001\002\000\006\022" +
    "\uffe1\035\uffe1\001\002\000\024\007\024\012\033\025\041" +
    "\054\042\055\043\056\040\057\026\060\035\064\224\001" +
    "\002\000\004\013\226\001\002\000\004\013\225\001\002" +
    "\000\006\022\uffcf\035\uffcf\001\002\000\006\022\uffd0\035" +
    "\uffd0\001\002\000\004\032\230\001\002\000\030\026\013" +
    "\031\141\033\146\036\151\040\147\041\142\043\156\044" +
    "\137\046\143\050\163\054\157\001\002\000\006\022\uffd9" +
    "\035\uffd9\001\002\000\010\061\016\062\021\063\020\001" +
    "\002\000\010\013\ufff2\030\125\047\ufff2\001\002\000\004" +
    "\046\235\001\002\000\010\061\016\062\021\063\020\001" +
    "\002\000\030\026\013\031\141\033\146\036\151\040\147" +
    "\041\142\043\156\044\137\046\143\050\163\054\157\001" +
    "\002\000\010\004\ufff9\026\ufff9\045\ufff9\001\002\000\030" +
    "\026\013\031\141\033\146\036\151\040\147\041\142\043" +
    "\156\044\137\046\143\050\163\054\157\001\002\000\032" +
    "\026\013\031\141\033\146\036\151\037\242\040\147\041" +
    "\142\043\156\044\137\046\143\050\163\054\157\001\002" +
    "\000\004\005\243\001\002\000\004\002\ufffe\001\002\000" +
    "\004\002\001\001\002\000\010\004\ufffc\026\ufffc\045\ufffc" +
    "\001\002\000\010\004\ufffb\026\ufffb\045\ufffb\001\002\000" +
    "\004\022\251\001\002\000\004\002\000\001\002\000\010" +
    "\004\ufffd\026\ufffd\045\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\247\000\014\015\006\016\010\020\003\024\005\025" +
    "\004\001\001\000\010\016\247\024\246\025\245\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\033\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\002\024\004\030\005\033\006\022\007" +
    "\031\010\035\011\027\012\026\013\036\001\001\000\002" +
    "\001\001\000\006\002\024\013\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\002\024\004" +
    "\030\006\022\007\055\010\035\011\027\012\026\013\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\002\024" +
    "\004\030\006\022\011\052\012\026\013\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\002\024\004\030" +
    "\005\044\006\022\007\031\010\035\011\027\012\026\013" +
    "\036\014\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\002\024\004\030\005\051\006" +
    "\022\007\031\010\035\011\027\012\026\013\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\002\024\004\030\006\022\011\054\012\026\013\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\002\024\004\030\006\022\010\060\011\027" +
    "\012\026\013\036\001\001\000\002\001\001\000\006\002" +
    "\024\013\064\001\001\000\006\002\024\013\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\002\024\012\105\013\036\001\001\000\012\002\024" +
    "\006\104\012\026\013\036\001\001\000\010\002\024\012" +
    "\103\013\036\001\001\000\012\002\024\006\102\012\026" +
    "\013\036\001\001\000\012\002\024\006\101\012\026\013" +
    "\036\001\001\000\012\002\024\006\100\012\026\013\036" +
    "\001\001\000\012\002\024\006\077\012\026\013\036\001" +
    "\001\000\012\002\024\006\076\012\026\013\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\026" +
    "\110\030\113\031\114\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\116\001\001\000\004\031\120\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\027\121\001\001\000\002\001" +
    "\001\000\004\033\123\001\001\000\002\001\001\000\004" +
    "\041\131\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\026\133\030\113\031\114\001\001\000\002\001\001\000" +
    "\004\033\135\001\001\000\030\002\153\021\151\022\143" +
    "\023\144\024\160\032\147\034\161\035\137\036\154\037" +
    "\157\040\152\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\002\024\003\226\004\030\005\212\006\022\007" +
    "\031\010\035\011\027\012\026\013\036\001\001\000\002" +
    "\001\001\000\024\002\024\004\030\005\220\006\022\007" +
    "\031\010\035\011\027\012\026\013\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\002\024\003\211\004" +
    "\030\005\212\006\022\007\031\010\035\011\027\012\026" +
    "\013\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\002\153\017\200\021\201\022\143\023\144\024\160" +
    "\032\147\034\161\035\137\036\154\037\157\040\152\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\002\153" +
    "\022\175\023\144\024\160\032\147\034\161\035\137\036" +
    "\154\037\157\040\152\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\002\153\022\174\023\144\024\160\032" +
    "\147\034\161\035\137\036\154\037\157\040\152\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\002\024\004" +
    "\030\005\177\006\022\007\031\010\035\011\027\012\026" +
    "\013\036\001\001\000\002\001\001\000\030\002\153\021" +
    "\203\022\143\023\144\024\160\032\147\034\161\035\137" +
    "\036\154\037\157\040\152\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\002\024\004\030" +
    "\005\205\006\022\007\031\010\035\011\027\012\026\013" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\002\153\022\214\023\144\024\160\032\147" +
    "\034\161\035\137\036\154\037\157\040\152\001\001\000" +
    "\002\001\001\000\026\002\153\022\216\023\144\024\160" +
    "\032\147\034\161\035\137\036\154\037\157\040\152\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\002\024\004\030\005\222\006\022\007\031\010" +
    "\035\011\027\012\026\013\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\002\153\022\230\023\144\024\160" +
    "\032\147\034\161\035\137\036\154\037\157\040\152\001" +
    "\001\000\002\001\001\000\004\033\232\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\033\235\001\001\000" +
    "\030\002\153\021\236\022\143\023\144\024\160\032\147" +
    "\034\161\035\137\036\154\037\157\040\152\001\001\000" +
    "\002\001\001\000\032\002\153\017\240\021\201\022\143" +
    "\023\144\024\160\032\147\034\161\035\137\036\154\037" +
    "\157\040\152\001\001\000\030\002\153\021\203\022\143" +
    "\023\144\024\160\032\147\034\161\035\137\036\154\037" +
    "\157\040\152\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /*
    public void syntax_error(Symbol s) {
        System.out.println("Error en la línea " + (s.right+1) + ", columna " + s.left + ": "
            + SintacticoSym.terminalNames[s.sym] + "(" + s.value + ") no reconocido.");
    }   */

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
            System.out.println("Error en la linea "+ (s.left+1)+ " Columna "+ s.right+ ". Valor simbolo '"
            +s.value+"' . Simbolo n° "+s.sym+ " no reconocido." );
        }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {




  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Programa start_val = (Programa)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= declaraciones bloque_main 
            {
              Programa RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		List<Sentencia> d = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bmleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bmright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Bloque bm = (Bloque)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            Bloque declaraciones = new Bloque(d,"DECLARACIONES",false);
            RESULT = new Programa(declaraciones,bm);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("programa",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= bloque_main 
            {
              Programa RESULT =null;
		int bmleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bmright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Bloque bm = (Bloque)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new Programa(bm);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("programa",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // bloque_main ::= MAIN IS sentencias END PUNTO 
            {
              Bloque RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		List<Sentencia> ss = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
            RESULT = new Bloque(ss,"MAIN",true);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bloque_main",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaraciones ::= declaraciones declaracion_variable PUNTO_COMA 
            {
              List<Sentencia> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		List<Sentencia> d = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int dvleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		DeclaracionVariable dv = (DeclaracionVariable)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            d.add(dv);
            RESULT= d;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaraciones",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaraciones ::= declaracion_variable PUNTO_COMA 
            {
              List<Sentencia> RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		DeclaracionVariable dv = (DeclaracionVariable)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            List<Sentencia> ds = new ArrayList<>();
            ds.add(dv);
            RESULT= ds;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaraciones",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaraciones ::= declaraciones declaracion_funcion 
            {
              List<Sentencia> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		List<Sentencia> d = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int dfleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		DeclaracionFuncion df = (DeclaracionFuncion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            d.add(df);
            RESULT= d;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaraciones",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaraciones ::= declaracion_funcion 
            {
              List<Sentencia> RESULT =null;
		int dfleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		DeclaracionFuncion df = (DeclaracionFuncion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            List<Sentencia> dfs = new ArrayList<>();
            dfs.add(df);
            RESULT= dfs;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaraciones",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracion_funcion ::= FUNCTION IDENTIFICADOR APERTURA_PARENTESIS parametros CIERRE_PARENTESIS RETURN tipo sentencia 
            {
              DeclaracionFuncion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		List<Parametro> p = (List<Parametro>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Sentencia s = (Sentencia)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            Identificador identificador = new Identificador(id,t);
            List<Sentencia> aux = new ArrayList<Sentencia>();
            aux.add(s);
            Bloque bloque = new Bloque(aux,false);
            RESULT= new DeclaracionFuncion(identificador,t,p,bloque);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracion_funcion ::= FUNCTION IDENTIFICADOR APERTURA_PARENTESIS CIERRE_PARENTESIS RETURN tipo sentencia 
            {
              DeclaracionFuncion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Sentencia s = (Sentencia)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            Identificador identificador = new Identificador(id,t);
            List<Sentencia> aux = new ArrayList<Sentencia>();
            aux.add(s);
            Bloque bloque = new Bloque(aux,false);
            RESULT= new DeclaracionFuncion(identificador,t,bloque);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // parametros ::= parametro COMA parametros 
            {
              List<Parametro> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int ppleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		List<Parametro> pp = (List<Parametro>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            pp.add(p);
            RESULT = pp;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametros",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // parametros ::= parametro_con_v_defecto parametros_con_v_defecto 
            {
              List<Parametro> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int ppleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		List<Parametro> pp = (List<Parametro>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            pp.add(p);
            RESULT = pp;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametros",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // parametros ::= parametro 
            {
              List<Parametro> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            List<Parametro> ps = new ArrayList<>();
            ps.add(p);
            RESULT= ps;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametros",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // parametros_con_v_defecto ::= COMA parametro_con_v_defecto parametros_con_v_defecto 
            {
              List<Parametro> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int ppleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		List<Parametro> pp = (List<Parametro>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            pp.add(p);
            RESULT=pp;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametros_con_v_defecto",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // parametros_con_v_defecto ::= 
            {
              List<Parametro> RESULT =null;
		
            List<Parametro> pvs = new ArrayList<>();
            RESULT= pvs;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametros_con_v_defecto",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // parametro ::= IDENTIFICADOR IS tipo 
            {
              Parametro RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            Identificador identificador = new Identificador(id,t);
            RESULT= new Parametro(t,identificador);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametro",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // parametro_con_v_defecto ::= IDENTIFICADOR IS tipo IGUAL valor_defecto 
            {
              Parametro RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Constante v = (Constante)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            Identificador identificador = new Identificador(id,t);
            RESULT= new Parametro(t,identificador,v);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametro_con_v_defecto",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // valor_defecto ::= INTEGER_LITERAL 
            {
              Constante RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT= new Constante(i, Tipo.INTEGER);

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valor_defecto",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // valor_defecto ::= FLOAT_LITERAL 
            {
              Constante RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT= new Constante (f, Tipo.FLOAT);

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valor_defecto",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // valor_defecto ::= TRUE 
            {
              Constante RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT=new Constante(t,Tipo.BOOL);

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valor_defecto",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // valor_defecto ::= FALSE 
            {
              Constante RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT= new Constante(f,Tipo.BOOL);

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valor_defecto",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentencias ::= sentencias sentencia 
            {
              List<Sentencia> RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		List<Sentencia> ss = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Sentencia s = (Sentencia)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            ss.add(s);
            RESULT= ss;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencias",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentencias ::= sentencia 
            {
              List<Sentencia> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Sentencia s = (Sentencia)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            List<Sentencia> ls = new ArrayList<>();
            ls.add(s);
            RESULT= ls;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencias",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sentencia ::= instruccion PUNTO_COMA 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Sentencia i = (Sentencia)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT=i;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instruccion ::= while 
            {
              Sentencia RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		While w = (While)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=w;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // instruccion ::= for 
            {
              Sentencia RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		For f = (For)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=f;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instruccion ::= if 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		If i = (If)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=i;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instruccion ::= invocacion_funciones 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion i = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=(Sentencia) i;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // instruccion ::= asignacion 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Asignacion a = (Asignacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=a;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // instruccion ::= declaracion_variable 
            {
              Sentencia RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		DeclaracionVariable d = (DeclaracionVariable)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=d;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // instruccion ::= BREAK 
            {
              Sentencia RESULT =null;
		
            RESULT= new Break("BREAK");
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // instruccion ::= CONTINUE 
            {
              Sentencia RESULT =null;
		
            RESULT= new Continue("CONTINUE");
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // instruccion ::= RETURN expresion 
            {
              Sentencia RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT= new Return(e);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // instruccion ::= write 
            {
              Sentencia RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Write w = (Write)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=w;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // instruccion ::= writeln 
            {
              Sentencia RESULT =null;
		int wlnleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int wlnright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Write wln = (Write)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=wln;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // instruccion ::= bloque 
            {
              Sentencia RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=b;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // bloque ::= BEGIN sentencias END 
            {
              Sentencia RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		List<Sentencia> ss = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT = new Bloque (ss,"BLOQUE",false);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bloque",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // declaracion_variable ::= VARIABLE IDENTIFICADOR IS tipo 
            {
              DeclaracionVariable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            Identificador identificador = new Identificador(id,t);
            RESULT= new DeclaracionVariable(identificador,t);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion_variable",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // declaracion_variable ::= VARIABLE IDENTIFICADOR IS tipo IGUAL expresion 
            {
              DeclaracionVariable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            Identificador identificador = new Identificador(id,t);
            RESULT= new DeclaracionVariable(identificador,t,e);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion_variable",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // asignacion ::= IDENTIFICADOR IGUAL expresion 
            {
              Asignacion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                   Identificador ident = new Identificador(id);
                   RESULT = new Asignacion(ident,e);
              
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacion",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // while ::= WHILE condicion DO instruccion 
            {
              While RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Sentencia i = (Sentencia)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            List<Sentencia> aux = new ArrayList<Sentencia>();
            aux.add(i);
            Bloque bloque = new Bloque(aux,"BLOQUE_WHILE",false);
            RESULT= new While("WHILE",c, bloque);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("while",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // for ::= FOR IDENTIFICADOR FROM INTEGER_LITERAL TO INTEGER_LITERAL BY INTEGER_LITERAL DO instruccion 
            {
              For RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Sentencia i = (Sentencia)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		

            Identificador identificador = new Identificador(id);
            Constante from = new Constante(f, Tipo.INTEGER);
            Constante to = new Constante(t, Tipo.INTEGER);
            Constante by = new Constante(b, Tipo.INTEGER);
            List<Sentencia> aux = new ArrayList<Sentencia>();
            aux.add(i);
            Bloque bloque = new Bloque(aux,"FOR",false);
            RESULT= new For(identificador,from,to,by,bloque);

            /* FOR -> WHILE esta bien aca, no me grafica BLOQUE en el while interno
            List<Sentencia> cuerpoFor = new ArrayList<Sentencia>(); //lista de sentencias del bloque principal
            Expresion from = new Constante(f, Tipo.INTEGER);    //constante from
            Identificador identificador = new Identificador(id);    //identificador
            Sentencia as = new Asignacion(identificador,from);  //primera asignacion id=f;
            cuerpoFor.add(as);  //agrego esa sentencia al bloque principal

            List<Sentencia> aux = new ArrayList<Sentencia>();   //lista de sentencias del bloque while interno
            aux.add(i); //agrego todas las sentencias que eran del for original
            Expresion by = new Constante(b, Tipo.INTEGER);  //constante by
            Expresion exp = new Suma(identificador,by); //expresion usada en la asignacion id+by;
            Sentencia asig = new Asignacion(identificador,exp); // asignacion id=id+by;
            aux.add(asig);  //agrego la asignacion a la lista de sentencias del bloque while interno

            Expresion to = new Constante(t,Tipo.INTEGER);   //constante to
            Expresion condicion = new MenorIgual(identificador,to); //condicion del while interno

            Bloque bloque = new Bloque(aux,"BLOQUE",false);  //bloque de sentencias del while interno

            While w = new While("WHILE",condicion,bloque);  // while interno completo
            cuerpoFor.add(w);   //agrego el while completo a la lista de sentencias del cuerpo de mi for original
            RESULT = new Bloque (cuerpoFor,"FOR->WHILE",false);
            */

        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("for",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // for ::= FOR IDENTIFICADOR FROM INTEGER_LITERAL TO INTEGER_LITERAL DO instruccion 
            {
              For RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Sentencia i = (Sentencia)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		

            Identificador identificador = new Identificador(id);
            Constante from = new Constante(f, Tipo.INTEGER);
            Constante to = new Constante(t, Tipo.INTEGER);
            Constante by = new Constante(String.valueOf(1), Tipo.INTEGER);
            List<Sentencia> aux = new ArrayList<Sentencia>();
            aux.add(i);
            Bloque bloque = new Bloque(aux,"FOR",false);
            RESULT= new For(identificador,from,to,by,bloque);

            /* FOR -> WHILE esta bien aca, no me grafica BLOQUE en el while interno
            List<Sentencia> cuerpoFor = new ArrayList<Sentencia>(); //lista de sentencias del bloque principal
            Expresion from = new Constante(f, Tipo.INTEGER);    //constante from
            Identificador identificador = new Identificador(id);    //identificador
            Sentencia as = new Asignacion(identificador,from);  //primera asignacion id=f;
            cuerpoFor.add(as);  //agrego esa sentencia al bloque principal

            List<Sentencia> aux = new ArrayList<Sentencia>();   //lista de sentencias del bloque while interno
            aux.add(i); //agrego todas las sentencias que eran del for original
            Expresion by = new Constante(String.valueOf(1), Tipo.INTEGER);  //constante by
            Expresion exp = new Suma(identificador,by); //expresion usada en la asignacion id+by;
            Sentencia asig = new Asignacion(identificador,exp); // asignacion id=id+by;
            aux.add(asig);  //agrego la asignacion a la lista de sentencias del bloque while interno

            Expresion to = new Constante(t,Tipo.INTEGER);   //constante to
            Expresion condicion = new MenorIgual(identificador,to); //condicion del while interno

            Bloque bloque = new Bloque(aux,"BLOQUE",false);  //bloque de sentencias del while interno

            While w = new While("WHILE",condicion,bloque);  // while interno completo
            cuerpoFor.add(w);   //agrego el while completo a la lista de sentencias del cuerpo de mi for original
            RESULT = new Bloque (cuerpoFor,"FOR->WHILE",false);
            */
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("for",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // invocacion_funciones ::= IDENTIFICADOR APERTURA_PARENTESIS parametros_invocacion CIERRE_PARENTESIS 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		List<Expresion> p = (List<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            Identificador identificador = new Identificador(id);
            RESULT = new InvocacionFuncion(identificador,p);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("invocacion_funciones",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // invocacion_funciones ::= IDENTIFICADOR APERTURA_PARENTESIS CIERRE_PARENTESIS 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
            Identificador identificador = new Identificador(id);
            RESULT = new InvocacionFuncion(identificador);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("invocacion_funciones",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // parametros_invocacion ::= parametros_invocacion COMA expresion 
            {
              List<Expresion> RESULT =null;
		int pileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int piright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		List<Expresion> pi = (List<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            pi.add(e);
            RESULT = pi;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametros_invocacion",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // parametros_invocacion ::= expresion 
            {
              List<Expresion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            List<Expresion> exp = new ArrayList();
            exp.add(e);
            RESULT= exp;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametros_invocacion",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // write ::= WRITE APERTURA_PARENTESIS expresion CIERRE_PARENTESIS 
            {
              Write RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT = new Write(e);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("write",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // write ::= WRITE APERTURA_PARENTESIS STRING_LITERAL CIERRE_PARENTESIS 
            {
              Write RESULT =null;
		
            Write w = new Write();
            w.setEsString(true);
            RESULT = w;
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("write",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // writeln ::= WRITELN APERTURA_PARENTESIS expresion CIERRE_PARENTESIS 
            {
              Write RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT = new Write(e, true);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("writeln",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // writeln ::= WRITELN APERTURA_PARENTESIS STRING_LITERAL CIERRE_PARENTESIS 
            {
              Write RESULT =null;
		
            Write w = new Write(true);
            w.setEsString(true);
            RESULT = w;
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("writeln",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // tipo ::= INTEGER 
            {
              Tipo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT= Tipo.INTEGER;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // tipo ::= FLOAT 
            {
              Tipo RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT= Tipo.FLOAT;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // tipo ::= BOOLEAN 
            {
              Tipo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT= Tipo.BOOL;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // if ::= IF condicion THEN instruccion ELSE instruccion 
            {
              If RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Sentencia i1 = (Sentencia)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Sentencia i2 = (Sentencia)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            List<Sentencia> sentenciasIf = new ArrayList<Sentencia>();
            sentenciasIf.add(i1);
            Bloque bloqueThen = new Bloque(sentenciasIf,"BLOQUE_THEN",false);
            List<Sentencia> sentenciasElse = new ArrayList<Sentencia>();
            sentenciasElse.add(i2);
            Bloque bloqueElse = new Bloque(sentenciasElse,"BLOQUE_ELSE",false);
            RESULT= new If("IF/ELSE",c, bloqueThen, bloqueElse);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("if",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // if ::= IF condicion THEN instruccion 
            {
              If RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Sentencia i = (Sentencia)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            List<Sentencia> sentenciasIf = new ArrayList<Sentencia>();
            sentenciasIf.add(i);
            Bloque bloqueThen = new Bloque(sentenciasIf,"BLOQUE_THEN",false);
            RESULT= new If("IF",c, bloqueThen);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("if",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // condicion ::= expresion 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=e;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expresion ::= exp_or 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=e;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // exp_or ::= exp_or OR exp_and 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion ea = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT= new Or(e, ea);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp_or",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // exp_or ::= exp_and 
            {
              Expresion RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion ea = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=ea;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp_or",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // exp_and ::= exp_and AND exp_not 
            {
              Expresion RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion ea = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int enleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int enright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion en = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT= new And(ea,en);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp_and",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // exp_and ::= exp_not 
            {
              Expresion RESULT =null;
		int enleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int enright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion en = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=en;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp_and",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // exp_not ::= NOT exp_not 
            {
              Expresion RESULT =null;
		int enleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int enright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion en = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT= new Not(en);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp_not",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // exp_not ::= comparacion 
            {
              Expresion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT= c;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp_not",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // comparacion ::= exp_arit IGUAL_IGUAL exp_arit 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new IgualIgual(e1,e2);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comparacion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // comparacion ::= exp_arit DISTINTO exp_arit 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new Distinto(e1,e2);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comparacion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // comparacion ::= exp_arit MAYOR_IGUAL exp_arit 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new MayorIgual(e1,e2);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comparacion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // comparacion ::= exp_arit MENOR_IGUAL exp_arit 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new MenorIgual(e1,e2);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comparacion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // comparacion ::= exp_arit MENOR exp_arit 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new Menor(e1,e2);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comparacion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // comparacion ::= exp_arit MAYOR exp_arit 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new Mayor(e1,e2);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comparacion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // comparacion ::= exp_arit 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT= e;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comparacion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // exp_arit ::= exp_arit MAS termino 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion t = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new Suma(e, t);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp_arit",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // exp_arit ::= exp_arit MENOS termino 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion t = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new Resta(e, t);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp_arit",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // exp_arit ::= termino 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion t = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = t;
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp_arit",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // termino ::= termino MULTIPLICAR factor 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion t = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new Multiplicacion(t, f);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("termino",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // termino ::= termino DIVIDIR factor 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion t = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new Division(t, f);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("termino",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // termino ::= factor 
            {
              Expresion RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = f;
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("termino",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // factor ::= APERTURA_PARENTESIS exp_or CIERRE_PARENTESIS 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT = e;
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("factor",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // factor ::= IDENTIFICADOR 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new Identificador(id);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("factor",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // factor ::= INTEGER_LITERAL 
            {
              Expresion RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String ent = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new Constante(ent, Tipo.INTEGER);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("factor",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // factor ::= FLOAT_LITERAL 
            {
              Expresion RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new Constante(f, Tipo.FLOAT);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("factor",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // factor ::= TRUE 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new Constante(t, Tipo.BOOL);;
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("factor",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // factor ::= FALSE 
            {
              Expresion RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new Constante(f, Tipo.BOOL);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("factor",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // factor ::= invocacion_funciones 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion i = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = i;
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("factor",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // factor ::= MENOS factor 
            {
              Expresion RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new MenosUnario(f);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("factor",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
