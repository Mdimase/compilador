// DO NOT EDIT
// Generated by JFlex 1.8.1 http://jflex.de/
// source: src/compilador/lexico/Lexico.flex

package compilador.lexico;

import java.util.ArrayList;import java.util.Stack;
import java_cup.runtime.*;
import java_cup.sym;
import compilador.sintactico.SintacticoSym;



// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int COMENTARIOPAR = 2;
  public static final int COMENTARIOLLA = 4;
  public static final int STRING = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\41\u1f00\1\u0100\1\u3000\1\u3100\1\u0100"+
    "\1\u3200\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u1f00\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00"+
    "\1\u4f00\1\u5000\1\u1f00\3\u0100\1\u5100\1\u5200\1\u5300\12\u1f00"+
    "\4\u0100\1\u5400\17\u1f00\2\u0100\1\u5500\41\u1f00\2\u0100\1\u5600"+
    "\1\u5700\2\u1f00\1\u5800\1\u5900\27\u0100\1\u5a00\2\u0100\1\u5b00"+
    "\45\u1f00\1\u0100\1\u5c00\1\u5d00\11\u1f00\1\u5e00\24\u1f00\1\u5f00"+
    "\1\u6000\1\u1f00\1\u6100\1\u6200\1\u6300\1\u6400\2\u1f00\1\u6500"+
    "\5\u1f00\1\u6600\1\u6700\1\u6800\5\u1f00\1\u6900\1\u6a00\4\u1f00"+
    "\1\u6b00\2\u1f00\1\u6c00\16\u1f00\246\u0100\1\u6d00\20\u0100\1\u6e00"+
    "\1\u6f00\25\u0100\1\u7000\34\u0100\1\u7100\14\u1f00\2\u0100\1\u7200"+
    "\u0b06\u1f00\1\u2700\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1"+
    "\1\4\1\5\1\6\4\0\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\11\20\1\0\1\21"+
    "\1\22\1\23\1\24\1\25\1\0\32\26\1\27\1\30"+
    "\1\31\1\0\1\32\1\0\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\26\1\44\1\45"+
    "\1\46\1\47\1\50\2\26\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\26\1\57\1\26\1\60\1\0\1\61"+
    "\54\0\1\26\12\0\1\26\4\0\1\26\5\0\27\26"+
    "\1\0\37\26\1\0\u01ca\26\4\0\14\26\16\0\5\26"+
    "\7\0\1\26\1\0\1\26\21\0\165\26\1\0\2\26"+
    "\2\0\4\26\1\0\1\26\6\0\1\26\1\0\3\26"+
    "\1\0\1\26\1\0\24\26\1\0\123\26\1\0\213\26"+
    "\1\0\255\26\1\0\46\26\2\0\1\26\6\0\51\26"+
    "\10\0\55\26\1\0\1\26\1\0\2\26\1\0\2\26"+
    "\1\0\1\26\10\0\33\26\4\0\4\26\35\0\13\26"+
    "\5\0\100\26\12\62\4\0\146\26\1\0\10\26\2\0"+
    "\12\26\1\0\6\26\12\62\3\26\2\0\1\26\20\0"+
    "\73\26\2\0\145\26\16\0\12\62\54\26\4\0\1\26"+
    "\2\0\1\26\2\0\56\26\22\0\34\26\4\0\13\26"+
    "\65\0\25\26\1\0\10\26\25\0\17\26\1\0\201\26"+
    "\2\0\12\62\1\0\23\26\1\0\10\26\2\0\2\26"+
    "\2\0\26\26\1\0\7\26\1\0\1\26\3\0\4\26"+
    "\2\0\11\26\2\0\2\26\2\0\4\26\10\0\1\26"+
    "\4\0\2\26\1\0\5\26\2\0\12\62\2\26\12\0"+
    "\1\26\1\0\1\26\2\0\3\26\1\0\6\26\4\0"+
    "\2\26\2\0\26\26\1\0\7\26\1\0\2\26\1\0"+
    "\2\26\1\0\2\26\2\0\1\26\1\0\5\26\4\0"+
    "\2\26\2\0\3\26\3\0\1\26\7\0\4\26\1\0"+
    "\1\26\7\0\12\62\6\26\13\0\3\26\1\0\11\26"+
    "\1\0\3\26\1\0\26\26\1\0\7\26\1\0\2\26"+
    "\1\0\5\26\2\0\12\26\1\0\3\26\1\0\3\26"+
    "\2\0\1\26\17\0\4\26\2\0\12\62\11\0\7\26"+
    "\1\0\3\26\1\0\10\26\2\0\2\26\2\0\26\26"+
    "\1\0\7\26\1\0\2\26\1\0\5\26\2\0\11\26"+
    "\2\0\2\26\2\0\3\26\10\0\2\26\4\0\2\26"+
    "\1\0\5\26\2\0\12\62\1\0\1\26\20\0\2\26"+
    "\1\0\6\26\3\0\3\26\1\0\4\26\3\0\2\26"+
    "\1\0\1\26\1\0\2\26\3\0\2\26\3\0\3\26"+
    "\3\0\14\26\4\0\5\26\3\0\3\26\1\0\4\26"+
    "\2\0\1\26\6\0\1\26\16\0\12\62\20\0\15\26"+
    "\1\0\3\26\1\0\27\26\1\0\20\26\3\0\10\26"+
    "\1\0\3\26\1\0\4\26\7\0\2\26\1\0\3\26"+
    "\5\0\4\26\2\0\12\62\20\0\4\26\1\0\10\26"+
    "\1\0\3\26\1\0\27\26\1\0\12\26\1\0\5\26"+
    "\2\0\11\26\1\0\3\26\1\0\4\26\7\0\2\26"+
    "\7\0\1\26\1\0\4\26\2\0\12\62\1\0\2\26"+
    "\15\0\4\26\1\0\10\26\1\0\3\26\1\0\63\26"+
    "\1\0\3\26\1\0\5\26\5\0\4\26\7\0\5\26"+
    "\2\0\12\62\12\0\6\26\2\0\2\26\1\0\22\26"+
    "\3\0\30\26\1\0\11\26\1\0\1\26\2\0\7\26"+
    "\3\0\1\26\4\0\6\26\1\0\1\26\1\0\10\26"+
    "\6\0\12\62\2\0\2\26\15\0\72\26\5\0\17\26"+
    "\1\0\12\62\47\0\2\26\1\0\1\26\1\0\5\26"+
    "\1\0\30\26\1\0\1\26\1\0\27\26\2\0\5\26"+
    "\1\0\1\26\1\0\6\26\2\0\12\62\2\0\4\26"+
    "\40\0\1\26\27\0\2\26\6\0\12\62\13\0\1\26"+
    "\1\0\1\26\1\0\1\26\4\0\12\26\1\0\44\26"+
    "\4\0\24\26\1\0\22\26\1\0\44\26\11\0\1\26"+
    "\71\0\100\26\12\62\6\0\100\26\12\62\4\26\2\0"+
    "\46\26\1\0\1\26\5\0\1\26\2\0\53\26\1\0"+
    "\115\26\1\0\4\26\2\0\7\26\1\0\1\26\1\0"+
    "\4\26\2\0\51\26\1\0\4\26\2\0\41\26\1\0"+
    "\4\26\2\0\7\26\1\0\1\26\1\0\4\26\2\0"+
    "\17\26\1\0\71\26\1\0\4\26\2\0\103\26\2\0"+
    "\3\26\40\0\20\26\20\0\126\26\2\0\6\26\3\0"+
    "\u016c\26\2\0\21\26\1\0\32\26\5\0\113\26\3\0"+
    "\13\26\7\0\15\26\1\0\7\26\13\0\25\26\13\0"+
    "\24\26\14\0\15\26\1\0\3\26\1\0\2\26\14\0"+
    "\124\26\3\0\1\26\4\0\2\26\2\0\12\62\41\0"+
    "\3\26\2\0\12\62\6\0\131\26\7\0\53\26\5\0"+
    "\106\26\12\0\37\26\1\0\14\26\4\0\14\26\12\0"+
    "\12\62\36\26\2\0\5\26\13\0\54\26\4\0\32\26"+
    "\6\0\12\62\46\0\34\26\4\0\77\26\1\0\35\26"+
    "\2\0\1\26\12\62\6\0\12\62\15\0\1\26\10\0"+
    "\17\26\101\0\114\26\4\0\12\62\21\0\11\26\14\0"+
    "\60\26\12\62\72\26\14\0\70\26\10\0\12\62\3\0"+
    "\3\26\12\62\44\26\2\0\11\26\7\0\53\26\2\0"+
    "\3\26\20\0\3\26\1\0\47\26\5\0\372\26\1\0"+
    "\33\26\2\0\6\26\2\0\46\26\2\0\6\26\2\0"+
    "\10\26\1\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\37\26\2\0\65\26\1\0\7\26\1\0\1\26\3\0"+
    "\3\26\1\0\7\26\3\0\4\26\2\0\6\26\4\0"+
    "\15\26\5\0\3\26\1\0\7\26\102\0\2\26\23\0"+
    "\1\26\34\0\1\26\15\0\1\26\20\0\15\26\63\0"+
    "\41\26\21\0\1\26\4\0\1\26\2\0\12\26\1\0"+
    "\1\26\3\0\5\26\6\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\1\0\13\26\2\0\4\26\5\0"+
    "\5\26\4\0\1\26\21\0\51\26\u022d\0\64\26\26\0"+
    "\57\26\1\0\57\26\1\0\205\26\6\0\11\26\14\0"+
    "\46\26\1\0\1\26\5\0\1\26\2\0\70\26\7\0"+
    "\1\26\17\0\30\26\11\0\7\26\1\0\7\26\1\0"+
    "\7\26\1\0\7\26\1\0\7\26\1\0\7\26\1\0"+
    "\7\26\1\0\7\26\1\0\40\26\57\0\1\26\325\0"+
    "\3\26\31\0\17\26\1\0\5\26\2\0\5\26\4\0"+
    "\126\26\2\0\2\26\2\0\3\26\1\0\132\26\1\0"+
    "\4\26\5\0\53\26\1\0\136\26\21\0\33\26\65\0"+
    "\306\26\112\0\360\26\20\0\215\26\103\0\56\26\2\0"+
    "\15\26\3\0\20\26\12\62\2\26\24\0\63\26\1\0"+
    "\12\26\1\0\163\26\45\0\11\26\2\0\147\26\2\0"+
    "\65\26\2\0\5\26\60\0\61\26\30\0\64\26\14\0"+
    "\106\26\12\0\12\62\6\0\30\26\3\0\1\26\1\0"+
    "\3\26\12\62\44\26\2\0\44\26\14\0\35\26\3\0"+
    "\101\26\16\0\1\26\12\62\6\0\20\26\12\62\5\26"+
    "\1\0\67\26\11\0\16\26\2\0\12\62\6\0\27\26"+
    "\3\0\111\26\30\0\3\26\2\0\20\26\2\0\5\26"+
    "\12\0\6\26\2\0\6\26\2\0\6\26\11\0\7\26"+
    "\1\0\7\26\1\0\53\26\1\0\14\26\10\0\173\26"+
    "\1\0\2\26\2\0\12\62\6\0\244\26\14\0\27\26"+
    "\4\0\61\26\4\0\156\26\2\0\152\26\46\0\7\26"+
    "\14\0\5\26\5\0\14\26\1\0\15\26\1\0\5\26"+
    "\1\0\1\26\1\0\2\26\1\0\2\26\1\0\154\26"+
    "\41\0\153\26\22\0\100\26\2\0\66\26\50\0\14\26"+
    "\4\0\20\26\20\0\20\26\3\0\2\26\30\0\3\26"+
    "\40\0\5\26\1\0\207\26\23\0\12\62\7\0\32\26"+
    "\4\0\1\26\1\0\32\26\13\0\131\26\3\0\6\26"+
    "\2\0\6\26\2\0\6\26\2\0\3\26\43\0\14\26"+
    "\1\0\32\26\1\0\23\26\1\0\2\26\1\0\17\26"+
    "\2\0\16\26\42\0\173\26\105\0\65\26\210\0\1\26"+
    "\202\0\35\26\3\0\61\26\17\0\1\26\37\0\40\26"+
    "\15\0\36\26\5\0\53\26\5\0\36\26\2\0\44\26"+
    "\4\0\10\26\1\0\5\26\52\0\236\26\2\0\12\62"+
    "\6\0\44\26\4\0\44\26\4\0\50\26\10\0\64\26"+
    "\234\0\67\26\11\0\26\26\12\0\10\26\230\0\6\26"+
    "\2\0\1\26\1\0\54\26\1\0\2\26\3\0\1\26"+
    "\2\0\27\26\12\0\27\26\11\0\37\26\101\0\23\26"+
    "\1\0\2\26\12\0\26\26\12\0\32\26\106\0\70\26"+
    "\6\0\2\26\100\0\4\26\1\0\2\26\5\0\10\26"+
    "\1\0\3\26\1\0\35\26\2\0\3\26\4\0\1\26"+
    "\40\0\35\26\3\0\35\26\43\0\10\26\1\0\36\26"+
    "\31\0\66\26\12\0\26\26\12\0\23\26\15\0\22\26"+
    "\156\0\111\26\67\0\63\26\15\0\63\26\15\0\50\26"+
    "\10\0\12\62\306\0\35\26\12\0\1\26\10\0\41\26"+
    "\217\0\27\26\11\0\107\26\37\0\12\62\17\0\74\26"+
    "\25\0\31\26\7\0\12\62\6\0\65\26\1\0\12\62"+
    "\4\0\3\26\11\0\44\26\2\0\1\26\11\0\105\26"+
    "\4\0\4\26\3\0\12\62\1\26\1\0\1\26\43\0"+
    "\22\26\1\0\45\26\6\0\1\26\101\0\7\26\1\0"+
    "\1\26\1\0\4\26\1\0\17\26\1\0\12\26\7\0"+
    "\73\26\5\0\12\62\6\0\4\26\1\0\10\26\2\0"+
    "\2\26\2\0\26\26\1\0\7\26\1\0\2\26\1\0"+
    "\5\26\1\0\12\26\2\0\2\26\2\0\3\26\2\0"+
    "\1\26\6\0\1\26\5\0\7\26\2\0\7\26\3\0"+
    "\5\26\213\0\113\26\5\0\12\62\4\0\2\26\40\0"+
    "\106\26\1\0\1\26\10\0\12\62\246\0\66\26\2\0"+
    "\11\26\27\0\6\26\42\0\101\26\3\0\1\26\13\0"+
    "\12\62\46\0\71\26\7\0\12\62\66\0\33\26\2\0"+
    "\17\26\4\0\12\62\306\0\73\26\145\0\100\26\12\62"+
    "\25\0\1\26\240\0\10\26\2\0\56\26\2\0\10\26"+
    "\1\0\2\26\33\0\77\26\10\0\1\26\10\0\112\26"+
    "\3\0\1\26\42\0\71\26\7\0\11\26\1\0\55\26"+
    "\1\0\11\26\17\0\12\62\30\0\36\26\2\0\26\26"+
    "\1\0\16\26\111\0\7\26\1\0\2\26\1\0\54\26"+
    "\3\0\1\26\1\0\2\26\1\0\11\26\10\0\12\62"+
    "\6\0\6\26\1\0\2\26\1\0\45\26\1\0\2\26"+
    "\1\0\6\26\7\0\12\62\u0136\0\27\26\11\0\232\26"+
    "\146\0\157\26\21\0\304\26\274\0\57\26\321\0\107\26"+
    "\271\0\71\26\7\0\37\26\1\0\12\62\146\0\36\26"+
    "\2\0\5\26\13\0\67\26\11\0\4\26\14\0\12\62"+
    "\11\0\25\26\5\0\23\26\260\0\100\26\200\0\113\26"+
    "\4\0\71\26\7\0\21\26\100\0\2\26\1\0\1\26"+
    "\34\0\370\26\10\0\363\26\15\0\37\26\61\0\3\26"+
    "\21\0\4\26\10\0\u018c\26\4\0\153\26\5\0\15\26"+
    "\3\0\11\26\7\0\12\26\3\0\2\26\306\0\5\26"+
    "\3\0\6\26\10\0\10\26\2\0\7\26\36\0\4\26"+
    "\224\0\3\26\273\0\125\26\1\0\107\26\1\0\2\26"+
    "\2\0\1\26\2\0\2\26\2\0\4\26\1\0\14\26"+
    "\1\0\1\26\1\0\7\26\1\0\101\26\1\0\4\26"+
    "\2\0\10\26\1\0\7\26\1\0\34\26\1\0\4\26"+
    "\1\0\5\26\1\0\1\26\3\0\7\26\1\0\u0154\26"+
    "\2\0\31\26\1\0\31\26\1\0\37\26\1\0\31\26"+
    "\1\0\37\26\1\0\31\26\1\0\37\26\1\0\31\26"+
    "\1\0\37\26\1\0\31\26\1\0\10\26\2\0\62\62"+
    "\67\26\4\0\62\26\10\0\1\26\16\0\1\26\26\0"+
    "\5\26\1\0\17\26\120\0\7\26\1\0\21\26\2\0"+
    "\7\26\1\0\2\26\1\0\5\26\325\0\55\26\3\0"+
    "\16\26\2\0\12\62\4\0\1\26\u0171\0\60\26\12\62"+
    "\6\0\305\26\13\0\7\26\51\0\114\26\4\0\12\62"+
    "\246\0\4\26\1\0\33\26\1\0\2\26\1\0\1\26"+
    "\2\0\1\26\1\0\12\26\1\0\4\26\1\0\1\26"+
    "\1\0\1\26\6\0\1\26\4\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\3\26\1\0\2\26\1\0\1\26"+
    "\2\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\2\26\1\0\1\26\2\0\4\26"+
    "\1\0\7\26\1\0\4\26\1\0\4\26\1\0\1\26"+
    "\1\0\12\26\1\0\21\26\5\0\3\26\1\0\5\26"+
    "\1\0\21\26\164\0\32\26\6\0\32\26\6\0\32\26"+
    "\166\0\327\26\51\0\65\26\13\0\336\26\2\0\u0182\26"+
    "\16\0\u0131\26\37\0\36\26\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29440];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\2\2\1\1\1\3\1\2\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\2\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\16\21\1\24"+
    "\1\25\3\26\1\27\1\30\3\31\1\32\1\33\1\34"+
    "\1\35\1\1\1\36\1\37\1\0\1\40\1\0\1\41"+
    "\1\42\1\43\5\21\1\44\1\21\1\45\7\21\1\46"+
    "\1\21\1\47\2\21\1\50\2\21\1\51\4\21\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\5\21\1\64\2\21\1\65\4\21\1\66\14\21"+
    "\1\67\2\21\1\70\2\21\1\71\2\21\1\72\1\73"+
    "\1\21\1\74\2\21\1\75\1\21\1\76\1\21\1\77"+
    "\1\100\5\21\1\101\1\102\7\21\1\103\2\21\1\104"+
    "\2\21\1\105\4\21\1\106\1\107\1\110\3\21\1\111"+
    "\4\21\1\112\3\21\1\113\1\114";

  private static int [] zzUnpackAction() {
    int [] result = new int[191];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\314\0\377\0\u0132"+
    "\0\314\0\u0165\0\u0198\0\314\0\u01cb\0\314\0\314\0\314"+
    "\0\u01fe\0\314\0\u0231\0\u0264\0\314\0\u0297\0\u02ca\0\u02fd"+
    "\0\u0330\0\314\0\314\0\u0363\0\u0396\0\u03c9\0\u03fc\0\u042f"+
    "\0\u0462\0\u0495\0\u04c8\0\u04fb\0\u052e\0\u0561\0\u0594\0\u05c7"+
    "\0\u05fa\0\314\0\314\0\314\0\u062d\0\u0660\0\314\0\314"+
    "\0\314\0\u0693\0\u06c6\0\314\0\314\0\u06f9\0\314\0\u072c"+
    "\0\314\0\314\0\u075f\0\u01fe\0\u0231\0\314\0\314\0\314"+
    "\0\314\0\u0792\0\u07c5\0\u07f8\0\u082b\0\u0330\0\u085e\0\u0330"+
    "\0\u0891\0\u08c4\0\u08f7\0\u092a\0\u095d\0\u0990\0\u09c3\0\u0330"+
    "\0\u09f6\0\u0330\0\u0a29\0\u0a5c\0\u0330\0\u0a8f\0\u0ac2\0\u0330"+
    "\0\u0af5\0\u0b28\0\u0b5b\0\u0b8e\0\314\0\314\0\314\0\314"+
    "\0\314\0\314\0\314\0\314\0\314\0\u0330\0\u0bc1\0\u0bf4"+
    "\0\u0c27\0\u0c5a\0\u0c8d\0\u0330\0\u0cc0\0\u0cf3\0\u0330\0\u0d26"+
    "\0\u0d59\0\u0d8c\0\u0dbf\0\u0330\0\u0df2\0\u0e25\0\u0e58\0\u0e8b"+
    "\0\u0ebe\0\u0ef1\0\u0f24\0\u0f57\0\u0f8a\0\u0fbd\0\u0ff0\0\u1023"+
    "\0\u0330\0\u1056\0\u1089\0\u0330\0\u10bc\0\u10ef\0\u0330\0\u1122"+
    "\0\u1155\0\u0330\0\u0330\0\u1188\0\u0330\0\u11bb\0\u11ee\0\u0330"+
    "\0\u1221\0\u0330\0\u1254\0\u0330\0\u0330\0\u1287\0\u12ba\0\u12ed"+
    "\0\u1320\0\u1353\0\u0330\0\u1386\0\u13b9\0\u13ec\0\u141f\0\u1452"+
    "\0\u1485\0\u14b8\0\u14eb\0\u0330\0\u151e\0\u1551\0\u0330\0\u1584"+
    "\0\u15b7\0\u0330\0\u15ea\0\u161d\0\u1650\0\u1683\0\u0330\0\u0330"+
    "\0\u0330\0\u16b6\0\u16e9\0\u171c\0\u0330\0\u174f\0\u1782\0\u17b5"+
    "\0\u17e8\0\u0330\0\u181b\0\u184e\0\u1881\0\u0330\0\u0330";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[191];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\2\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\5\1\31\1\32\1\5"+
    "\1\33\1\31\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\2\31\1\42\2\31\1\43\1\44\1\45\1\46\1\31"+
    "\1\47\1\31\1\50\1\51\1\31\1\52\1\53\1\5"+
    "\7\54\1\55\1\54\1\56\46\54\1\57\1\60\1\54"+
    "\7\61\1\62\1\61\1\63\46\61\1\64\1\65\1\61"+
    "\2\66\2\5\1\66\1\67\22\66\1\70\32\66\65\0"+
    "\1\6\103\0\1\71\37\0\2\12\1\6\1\7\57\12"+
    "\11\0\1\72\61\0\1\73\71\0\2\74\57\0\1\74"+
    "\1\0\2\75\57\0\1\74\1\0\2\24\65\0\1\76"+
    "\62\0\1\77\62\0\1\100\56\0\2\31\4\0\1\101"+
    "\1\31\3\0\26\31\2\0\1\31\17\0\2\31\4\0"+
    "\1\101\1\31\3\0\15\31\1\102\10\31\2\0\1\31"+
    "\17\0\2\31\4\0\1\101\1\31\3\0\5\31\1\103"+
    "\10\31\1\104\1\105\5\31\1\106\2\0\1\31\17\0"+
    "\2\31\4\0\1\101\1\31\3\0\16\31\1\107\7\31"+
    "\2\0\1\31\17\0\2\31\4\0\1\101\1\31\3\0"+
    "\16\31\1\110\7\31\2\0\1\31\17\0\2\31\4\0"+
    "\1\101\1\31\3\0\13\31\1\111\1\31\1\112\10\31"+
    "\2\0\1\31\17\0\2\31\4\0\1\101\1\31\3\0"+
    "\1\31\1\113\11\31\1\114\2\31\1\115\1\116\2\31"+
    "\1\117\3\31\2\0\1\31\17\0\2\31\4\0\1\101"+
    "\1\31\3\0\6\31\1\120\6\31\1\121\2\31\1\122"+
    "\5\31\2\0\1\31\17\0\2\31\4\0\1\101\1\31"+
    "\3\0\1\31\1\123\24\31\2\0\1\31\17\0\2\31"+
    "\4\0\1\101\1\31\3\0\16\31\1\124\7\31\2\0"+
    "\1\31\17\0\2\31\4\0\1\101\1\31\3\0\17\31"+
    "\1\125\6\31\2\0\1\31\17\0\2\31\4\0\1\101"+
    "\1\31\3\0\5\31\1\126\20\31\2\0\1\31\17\0"+
    "\2\31\4\0\1\101\1\31\3\0\10\31\1\127\5\31"+
    "\1\130\1\131\6\31\2\0\1\31\17\0\2\31\4\0"+
    "\1\101\1\31\3\0\1\31\1\132\24\31\2\0\1\31"+
    "\17\0\2\31\4\0\1\101\1\31\3\0\10\31\1\133"+
    "\6\31\1\134\6\31\2\0\1\31\11\0\1\135\61\0"+
    "\1\136\63\0\1\137\61\0\1\140\52\0\2\66\2\0"+
    "\1\66\1\0\22\66\1\0\32\66\5\0\1\141\22\0"+
    "\1\142\16\0\1\143\1\0\1\144\1\0\1\145\30\0"+
    "\1\53\60\0\2\31\4\0\1\101\1\31\3\0\4\31"+
    "\1\146\21\31\2\0\1\31\17\0\2\31\4\0\1\101"+
    "\1\31\3\0\7\31\1\147\16\31\2\0\1\31\17\0"+
    "\2\31\4\0\1\101\1\31\3\0\16\31\1\150\7\31"+
    "\2\0\1\31\17\0\2\31\4\0\1\101\1\31\3\0"+
    "\5\31\1\151\20\31\2\0\1\31\17\0\2\31\4\0"+
    "\1\101\1\31\3\0\15\31\1\152\10\31\2\0\1\31"+
    "\17\0\2\31\4\0\1\101\1\31\3\0\20\31\1\153"+
    "\5\31\2\0\1\31\17\0\2\31\4\0\1\101\1\31"+
    "\3\0\4\31\1\154\21\31\2\0\1\31\17\0\2\31"+
    "\4\0\1\101\1\31\3\0\13\31\1\155\12\31\2\0"+
    "\1\31\17\0\2\31\4\0\1\101\1\31\3\0\16\31"+
    "\1\156\7\31\2\0\1\31\17\0\2\31\4\0\1\101"+
    "\1\31\3\0\17\31\1\157\6\31\2\0\1\31\17\0"+
    "\2\31\4\0\1\101\1\31\3\0\16\31\1\160\7\31"+
    "\2\0\1\31\17\0\2\31\4\0\1\101\1\31\3\0"+
    "\15\31\1\161\10\31\2\0\1\31\17\0\2\31\4\0"+
    "\1\101\1\31\3\0\21\31\1\162\4\31\2\0\1\31"+
    "\17\0\2\31\4\0\1\101\1\31\3\0\11\31\1\163"+
    "\14\31\2\0\1\31\17\0\2\31\4\0\1\101\1\31"+
    "\3\0\21\31\1\164\4\31\2\0\1\31\17\0\2\31"+
    "\4\0\1\101\1\31\3\0\1\31\1\165\17\31\1\166"+
    "\4\31\2\0\1\31\17\0\2\31\4\0\1\101\1\31"+
    "\3\0\5\31\1\167\20\31\2\0\1\31\17\0\2\31"+
    "\4\0\1\101\1\31\3\0\22\31\1\170\3\31\2\0"+
    "\1\31\17\0\2\31\4\0\1\101\1\31\3\0\17\31"+
    "\1\171\6\31\2\0\1\31\17\0\2\31\4\0\1\101"+
    "\1\31\3\0\5\31\1\172\3\31\1\173\14\31\2\0"+
    "\1\31\17\0\2\31\4\0\1\101\1\31\3\0\11\31"+
    "\1\174\14\31\2\0\1\31\17\0\2\31\4\0\1\101"+
    "\1\31\3\0\11\31\1\175\14\31\2\0\1\31\17\0"+
    "\2\31\4\0\1\101\1\31\3\0\13\31\1\176\12\31"+
    "\2\0\1\31\17\0\2\31\4\0\1\101\1\31\3\0"+
    "\1\31\1\177\24\31\2\0\1\31\17\0\2\31\4\0"+
    "\1\101\1\31\3\0\21\31\1\200\4\31\2\0\1\31"+
    "\17\0\2\31\4\0\1\101\1\31\3\0\5\31\1\201"+
    "\20\31\2\0\1\31\17\0\2\31\4\0\1\101\1\31"+
    "\3\0\20\31\1\202\5\31\2\0\1\31\17\0\2\31"+
    "\4\0\1\101\1\31\3\0\1\31\1\203\24\31\2\0"+
    "\1\31\17\0\2\31\4\0\1\101\1\31\3\0\14\31"+
    "\1\204\11\31\2\0\1\31\17\0\2\31\4\0\1\101"+
    "\1\31\3\0\3\31\1\205\22\31\2\0\1\31\17\0"+
    "\2\31\4\0\1\101\1\31\3\0\5\31\1\206\20\31"+
    "\2\0\1\31\17\0\2\31\4\0\1\101\1\31\3\0"+
    "\15\31\1\207\10\31\2\0\1\31\17\0\2\31\4\0"+
    "\1\101\1\31\3\0\4\31\1\210\21\31\2\0\1\31"+
    "\17\0\2\31\4\0\1\101\1\31\3\0\22\31\1\211"+
    "\3\31\2\0\1\31\17\0\2\31\4\0\1\101\1\31"+
    "\3\0\15\31\1\212\10\31\2\0\1\31\17\0\2\31"+
    "\4\0\1\101\1\31\3\0\5\31\1\213\20\31\2\0"+
    "\1\31\17\0\2\31\4\0\1\101\1\31\3\0\11\31"+
    "\1\214\14\31\2\0\1\31\17\0\2\31\4\0\1\101"+
    "\1\31\3\0\15\31\1\215\10\31\2\0\1\31\17\0"+
    "\2\31\4\0\1\101\1\31\3\0\13\31\1\216\12\31"+
    "\2\0\1\31\17\0\2\31\4\0\1\101\1\31\3\0"+
    "\21\31\1\217\4\31\2\0\1\31\17\0\2\31\4\0"+
    "\1\101\1\31\3\0\15\31\1\220\10\31\2\0\1\31"+
    "\17\0\2\31\4\0\1\101\1\31\3\0\5\31\1\221"+
    "\20\31\2\0\1\31\17\0\2\31\4\0\1\101\1\31"+
    "\3\0\12\31\1\222\13\31\2\0\1\31\17\0\2\31"+
    "\4\0\1\101\1\31\3\0\11\31\1\223\14\31\2\0"+
    "\1\31\17\0\2\31\4\0\1\101\1\31\3\0\5\31"+
    "\1\224\20\31\2\0\1\31\17\0\2\31\4\0\1\101"+
    "\1\31\3\0\21\31\1\225\4\31\2\0\1\31\17\0"+
    "\2\31\4\0\1\101\1\31\3\0\21\31\1\226\4\31"+
    "\2\0\1\31\17\0\2\31\4\0\1\101\1\31\3\0"+
    "\7\31\1\227\16\31\2\0\1\31\17\0\2\31\4\0"+
    "\1\101\1\31\3\0\1\230\25\31\2\0\1\31\17\0"+
    "\2\31\4\0\1\101\1\31\3\0\17\31\1\231\6\31"+
    "\2\0\1\31\17\0\2\31\4\0\1\101\1\31\3\0"+
    "\1\31\1\232\24\31\2\0\1\31\17\0\2\31\4\0"+
    "\1\101\1\31\3\0\5\31\1\233\20\31\2\0\1\31"+
    "\17\0\2\31\4\0\1\101\1\31\3\0\5\31\1\234"+
    "\20\31\2\0\1\31\17\0\2\31\4\0\1\101\1\31"+
    "\3\0\1\31\1\235\24\31\2\0\1\31\17\0\2\31"+
    "\4\0\1\101\1\31\3\0\15\31\1\236\10\31\2\0"+
    "\1\31\17\0\2\31\4\0\1\101\1\31\3\0\11\31"+
    "\1\237\14\31\2\0\1\31\17\0\2\31\4\0\1\101"+
    "\1\31\3\0\5\31\1\240\20\31\2\0\1\31\17\0"+
    "\2\31\4\0\1\101\1\31\3\0\2\31\1\241\3\31"+
    "\1\242\2\31\1\243\14\31\2\0\1\31\17\0\2\31"+
    "\4\0\1\101\1\31\3\0\15\31\1\244\10\31\2\0"+
    "\1\31\17\0\2\31\4\0\1\101\1\31\3\0\2\31"+
    "\1\245\23\31\2\0\1\31\17\0\2\31\4\0\1\101"+
    "\1\31\3\0\13\31\1\246\12\31\2\0\1\31\17\0"+
    "\2\31\4\0\1\101\1\31\3\0\15\31\1\247\10\31"+
    "\2\0\1\31\17\0\2\31\4\0\1\101\1\31\3\0"+
    "\22\31\1\250\3\31\2\0\1\31\17\0\2\31\4\0"+
    "\1\101\1\31\3\0\16\31\1\251\7\31\2\0\1\31"+
    "\17\0\2\31\4\0\1\101\1\31\3\0\17\31\1\252"+
    "\6\31\2\0\1\31\17\0\2\31\4\0\1\101\1\31"+
    "\3\0\16\31\1\253\7\31\2\0\1\31\17\0\2\31"+
    "\4\0\1\101\1\31\3\0\13\31\1\254\12\31\2\0"+
    "\1\31\17\0\2\31\4\0\1\101\1\31\3\0\15\31"+
    "\1\255\10\31\2\0\1\31\17\0\2\31\4\0\1\101"+
    "\1\31\3\0\13\31\1\256\12\31\2\0\1\31\17\0"+
    "\2\31\4\0\1\101\1\31\3\0\15\31\1\257\10\31"+
    "\2\0\1\31\17\0\2\31\4\0\1\101\1\31\3\0"+
    "\5\31\1\260\20\31\2\0\1\31\17\0\2\31\4\0"+
    "\1\101\1\31\3\0\15\31\1\261\10\31\2\0\1\31"+
    "\17\0\2\31\4\0\1\101\1\31\3\0\16\31\1\262"+
    "\7\31\2\0\1\31\17\0\2\31\4\0\1\101\1\31"+
    "\3\0\16\31\1\263\7\31\2\0\1\31\17\0\2\31"+
    "\4\0\1\101\1\31\3\0\21\31\1\264\4\31\2\0"+
    "\1\31\17\0\2\31\4\0\1\101\1\31\3\0\5\31"+
    "\1\265\20\31\2\0\1\31\17\0\2\31\4\0\1\101"+
    "\1\31\3\0\13\31\1\266\12\31\2\0\1\31\17\0"+
    "\2\31\4\0\1\101\1\31\3\0\1\31\1\267\24\31"+
    "\2\0\1\31\17\0\2\31\4\0\1\101\1\31\3\0"+
    "\5\31\1\270\20\31\2\0\1\31\17\0\2\31\4\0"+
    "\1\101\1\31\3\0\5\31\1\271\20\31\2\0\1\31"+
    "\17\0\2\31\4\0\1\101\1\31\3\0\21\31\1\272"+
    "\4\31\2\0\1\31\17\0\2\31\4\0\1\101\1\31"+
    "\3\0\7\31\1\273\16\31\2\0\1\31\17\0\2\31"+
    "\4\0\1\101\1\31\3\0\1\31\1\274\24\31\2\0"+
    "\1\31\17\0\2\31\4\0\1\101\1\31\3\0\5\31"+
    "\1\275\20\31\2\0\1\31\17\0\2\31\4\0\1\101"+
    "\1\31\3\0\15\31\1\276\10\31\2\0\1\31\17\0"+
    "\2\31\4\0\1\101\1\31\3\0\17\31\1\277\6\31"+
    "\2\0\1\31";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6324];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\2\11\2\1\1\11\2\1\1\11\1\1\3\11"+
    "\1\1\1\11\2\1\1\11\4\1\2\11\16\1\3\11"+
    "\2\1\3\11\2\1\2\11\1\1\1\11\1\1\2\11"+
    "\1\0\1\1\1\0\4\11\33\1\11\11\132\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[191];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    /*************************************************************************
            * En esta sección se puede incluir código que se copiará textualmente
            * como parte de la definición de la clase del analizador léxico.
            * Típicamente serán variables de instancia o nuevos métodos de la clase.
            *************************************************************************/

            int string_yyline = 0;
            int string_yycolumn = 0;

            StringBuffer string = new StringBuffer();

            public enum TipoComentario {LLAVES,PARENTESIS};     //para los 2 tipos de comentarios multilinea
            public Stack<TipoComentario> comentarioAbiertos = new Stack<Lexico.TipoComentario>();  //pila para almacenar

            public ArrayList<MiToken> tablaDeSimbolos = new ArrayList<>();

            private MiToken token(String nombre) {
                return new MiToken(nombre, this.yyline, this.yycolumn);
            }

            private MiToken token(String nombre, Object valor) {
                return new MiToken(nombre, this.yyline, this.yycolumn, valor);
            }

            private MiToken token(String nombre, int line, int column, Object valor) {
                    return new MiToken(nombre, line, column, valor);
                }

            private void errorLexico(String message){
                throw new Error("Linea " + this.yyline + ", columna " + this.yycolumn + ": " + message );
            }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexico(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new Error("Caracter no permitido: <" + yytext() + ">");
            }
            // fall through
          case 77: break;
          case 2:
            { /* ignore */
            }
            // fall through
          case 78: break;
          case 3:
            { string.setLength(0);   //inicializo el buffer vacio
                                        yybegin(STRING); //invoco a el automata string que lo analize
                                        string_yyline = this.yyline;   //le mando los yyline y column para que los tenga al querer devolver el token
                                        string_yycolumn = this.yycolumn;
            }
            // fall through
          case 79: break;
          case 4:
            { return token("APERTURA_PARENTESIS", yytext());
            }
            // fall through
          case 80: break;
          case 5:
            { return token("CIERRE_PARENTESIS", yytext());
            }
            // fall through
          case 81: break;
          case 6:
            { return token("MULTIPLICAR", yytext());
            }
            // fall through
          case 82: break;
          case 7:
            { return token("MAS", yytext());
            }
            // fall through
          case 83: break;
          case 8:
            { return token("COMA", yytext());
            }
            // fall through
          case 84: break;
          case 9:
            { return token("MENOS", yytext());
            }
            // fall through
          case 85: break;
          case 10:
            { return token("PUNTO", yytext());
            }
            // fall through
          case 86: break;
          case 11:
            { return token("DIVIDIR", yytext());
            }
            // fall through
          case 87: break;
          case 12:
            { return token("INTEGER_LITERAL", yytext());
            }
            // fall through
          case 88: break;
          case 13:
            { return token("PUNTO_COMA", yytext());
            }
            // fall through
          case 89: break;
          case 14:
            { return token("MENOR", yytext());
            }
            // fall through
          case 90: break;
          case 15:
            { return token("IGUAL", yytext());
            }
            // fall through
          case 91: break;
          case 16:
            { return token("MAYOR", yytext());
            }
            // fall through
          case 92: break;
          case 17:
            { return token("IDENTIFICADOR", yytext());
            }
            // fall through
          case 93: break;
          case 18:
            { return token("APERTURA_CORCHETE", yytext());
            }
            // fall through
          case 94: break;
          case 19:
            { return token("CIERRE_CORCHETE",yytext());
            }
            // fall through
          case 95: break;
          case 20:
            { comentarioAbiertos.push(TipoComentario.LLAVES);
                                        yybegin(COMENTARIOLLA);
            }
            // fall through
          case 96: break;
          case 21:
            { errorLexico("cierre de comentario desbalanceado");
            }
            // fall through
          case 97: break;
          case 22:
            { /* ignoro el resto*/
            }
            // fall through
          case 98: break;
          case 23:
            { comentarioAbiertos.push(TipoComentario.LLAVES); yybegin(COMENTARIOLLA);
            }
            // fall through
          case 99: break;
          case 24:
            { errorLexico("se esperaba un cierre de parentesis, no uno de llaves");
            }
            // fall through
          case 100: break;
          case 25:
            { /* ignorar el resto */
            }
            // fall through
          case 101: break;
          case 26:
            { comentarioAbiertos.push(TipoComentario.LLAVES);
            }
            // fall through
          case 102: break;
          case 27:
            { if(comentarioAbiertos.pop() == TipoComentario.LLAVES){
                                        // se cerro un comentario de llaves
                                        if(comentarioAbiertos.empty()){
                                            // se cerraron todos los comentarios
                                            yybegin(YYINITIAL);
                                        } else if (comentarioAbiertos.peek() == TipoComentario.PARENTESIS){
                                            yybegin(COMENTARIOPAR);
                                        }
                                    } else {
                                            errorLexico("comentario desbalanceado");
                                    }
            }
            // fall through
          case 103: break;
          case 28:
            { string.append( yytext() );
            }
            // fall through
          case 104: break;
          case 29:
            { yybegin(YYINITIAL); //vuelvo a initial
                                 return token("STRING_LITERAL", string_yyline, string_yycolumn, string.toString());
            }
            // fall through
          case 105: break;
          case 30:
            { return token("DISTINTO", yytext());
            }
            // fall through
          case 106: break;
          case 31:
            { comentarioAbiertos.push(TipoComentario.PARENTESIS);
                                        yybegin(COMENTARIOPAR);
            }
            // fall through
          case 107: break;
          case 32:
            { return token("FLOAT_LITERAL", yytext());
            }
            // fall through
          case 108: break;
          case 33:
            { return token("MENOR_IGUAL", yytext());
            }
            // fall through
          case 109: break;
          case 34:
            { return token("IGUAL_IGUAL", yytext());
            }
            // fall through
          case 110: break;
          case 35:
            { return token("MAYOR_IGUAL", yytext());
            }
            // fall through
          case 111: break;
          case 36:
            { return token("BY",yytext());
            }
            // fall through
          case 112: break;
          case 37:
            { return token("DO", yytext());
            }
            // fall through
          case 113: break;
          case 38:
            { return token("IF", yytext());
            }
            // fall through
          case 114: break;
          case 39:
            { return token("IS", yytext());
            }
            // fall through
          case 115: break;
          case 40:
            { return token("OR", yytext());
            }
            // fall through
          case 116: break;
          case 41:
            { return token("TO", yytext());
            }
            // fall through
          case 117: break;
          case 42:
            { comentarioAbiertos.push(TipoComentario.PARENTESIS);
            }
            // fall through
          case 118: break;
          case 43:
            { if (comentarioAbiertos.pop() == TipoComentario.PARENTESIS){
                                        /* se cerro un comentario parentesis*/
                                        if(comentarioAbiertos.empty()){
                                            // se cerraron todos los comentarios
                                            yybegin(YYINITIAL);
                                        } else if (comentarioAbiertos.peek() == TipoComentario.LLAVES){
                                            yybegin(COMENTARIOLLA);
                                        }
                                    } else {
                                        errorLexico("comentario desbalanceado");
                                    }
            }
            // fall through
          case 119: break;
          case 44:
            { comentarioAbiertos.push(TipoComentario.PARENTESIS); yybegin(COMENTARIOPAR);
            }
            // fall through
          case 120: break;
          case 45:
            { errorLexico("se esperaba un cierrra llaves, no uno con parentesis");
            }
            // fall through
          case 121: break;
          case 46:
            { string.append('\"');
            }
            // fall through
          case 122: break;
          case 47:
            { string.append('\\');
            }
            // fall through
          case 123: break;
          case 48:
            { string.append('\n');
            }
            // fall through
          case 124: break;
          case 49:
            { string.append('\r');
            }
            // fall through
          case 125: break;
          case 50:
            { string.append('\t');
            }
            // fall through
          case 126: break;
          case 51:
            { return token("AND", yytext());
            }
            // fall through
          case 127: break;
          case 52:
            { return token("END", yytext());
            }
            // fall through
          case 128: break;
          case 53:
            { return token("FOR", yytext());
            }
            // fall through
          case 129: break;
          case 54:
            { return token("NOT", yytext());
            }
            // fall through
          case 130: break;
          case 55:
            { return token("ELSE", yytext());
            }
            // fall through
          case 131: break;
          case 56:
            { return token("FROM", yytext());
            }
            // fall through
          case 132: break;
          case 57:
            { return token("MAIN", yytext());
            }
            // fall through
          case 133: break;
          case 58:
            { return token("THEN" ,yytext());
            }
            // fall through
          case 134: break;
          case 59:
            { return token("TRUE", yytext());
            }
            // fall through
          case 135: break;
          case 60:
            { return token("WHEN",yytext());
            }
            // fall through
          case 136: break;
          case 61:
            { return token("BEGIN", yytext());
            }
            // fall through
          case 137: break;
          case 62:
            { return token("BREAK" , yytext());
            }
            // fall through
          case 138: break;
          case 63:
            { return token("FALSE", yytext());
            }
            // fall through
          case 139: break;
          case 64:
            { return token("FLOAT", yytext());
            }
            // fall through
          case 140: break;
          case 65:
            { return token("WHILE", yytext());
            }
            // fall through
          case 141: break;
          case 66:
            { return token("WRITE", yytext());
            }
            // fall through
          case 142: break;
          case 67:
            { return token("RETURN", yytext());
            }
            // fall through
          case 143: break;
          case 68:
            { return token("BOOLEAN", yytext());
            }
            // fall through
          case 144: break;
          case 69:
            { return token("INTEGER",yytext());
            }
            // fall through
          case 145: break;
          case 70:
            { return token("WRITELN", yytext());
            }
            // fall through
          case 146: break;
          case 71:
            { return token("CONTINUE", yytext());
            }
            // fall through
          case 147: break;
          case 72:
            { return token("FUNCTION", yytext());
            }
            // fall through
          case 148: break;
          case 73:
            { return token("VARIABLE", yytext());
            }
            // fall through
          case 149: break;
          case 74:
            { return token("READ_FLOAT", yytext());
            }
            // fall through
          case 150: break;
          case 75:
            { return token("READ_BOOLEAN", yytext());
            }
            // fall through
          case 151: break;
          case 76:
            { return token("READ_INTEGER", yytext());
            }
            // fall through
          case 152: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
